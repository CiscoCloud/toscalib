// Code generated by go-bindata.
// sources:
// NormativeTypes/artifact_types
// NormativeTypes/capability_types
// NormativeTypes/data_types
// NormativeTypes/group_types
// NormativeTypes/interface_types
// NormativeTypes/node_types
// NormativeTypes/policy_types
// NormativeTypes/relationship_types
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _artifact_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4f\x4f\xc3\x30\x0c\xc5\xef\xfd\x14\x3e\xc2\x81\x32\xae\xbd\x0d\x10\xd2\x0e\x13\x88\x8d\x5d\x10\x8a\x42\xeb\xae\x96\xd2\x24\x4a\xbc\x69\xfd\xf6\xa4\xe9\xfe\x68\x28\x68\x9d\x44\x4f\x91\xfc\xfc\xf3\x7b\x96\xcb\xc6\x97\x52\x54\x58\x93\x26\x26\xa3\xbd\xd8\xa2\xf3\xe1\x51\xc0\x50\xf2\xd4\x5a\x85\xa2\x93\xad\x12\x0f\x62\x22\x26\x59\x26\x1d\x53\x2d\x4b\x16\xdc\x59\xf4\x45\x06\xe1\x8b\xe2\xfc\x50\xf1\xf9\xbb\x31\x3c\x54\x00\x2a\xf4\xa5\x23\xcb\x91\xba\x6c\x10\x96\xaf\x8b\xa7\x29\x4c\xf7\x62\x58\x06\x0c\x48\xa5\xc0\x70\x83\x2e\x55\xf5\x81\xe1\x68\x8b\x50\x3b\xd3\x66\xc9\x81\x2f\xa4\xf0\x34\xb0\x17\x57\xa2\x57\x17\x49\x6b\x69\xc6\x33\x5a\x65\xba\x16\x35\x5f\x41\x4a\x65\x8c\x09\xbe\xa5\x47\xe8\x57\x04\xb5\x71\x41\x70\x60\xc3\x11\x70\xc9\x45\x3e\x6b\xe5\x7a\x64\xaa\x53\xd7\x38\x6a\xbe\x9a\x5f\x0b\x1e\x1a\x53\x81\x57\xe4\x78\x23\x15\xcc\x65\xd9\x90\x46\xb8\x59\xcd\x6f\x61\x50\x27\xcd\xcc\xfa\x9b\xea\x91\x32\xf6\xff\xfb\xb2\xe9\x8c\x7f\x69\xe1\xe7\x6e\xf2\x47\xe9\x9b\x71\x96\xce\x1b\x53\xe6\x16\xf1\x79\x34\x10\xcd\x85\x23\x87\x0f\x4d\x3b\xe8\x07\x81\x6f\x50\xa9\x7d\x6b\x4b\x2d\xc6\x9f\xaa\x00\x69\xad\xa2\x32\x72\xef\x77\x77\xbe\xd9\x2b\xea\x70\xe5\x02\x77\x5c\xc0\x67\xe8\x84\xaf\x51\x81\xde\x3a\x6e\xc6\x6e\xf9\x72\xa4\xe9\xef\x2c\xa4\x19\x9d\x75\xc8\x58\xc1\x30\x0a\x94\xd4\xeb\xcd\xe9\x56\xfe\xcc\x65\xa3\x3c\x91\xcd\x76\x21\xdb\x4f\x00\x00\x00\xff\xff\x67\x2b\xbe\x8b\x9c\x04\x00\x00")

func artifact_typesBytes() ([]byte, error) {
	return bindataRead(
		_artifact_types,
		"artifact_types",
	)
}

func artifact_types() (*asset, error) {
	bytes, err := artifact_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "artifact_types", size: 1180, mode: os.FileMode(511), modTime: time.Unix(1476596385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _capability_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x57\x4d\x6f\x23\x37\x0c\xbd\xe7\x57\x10\xe8\x75\xd7\x48\xae\x3e\x14\x48\x9c\x45\x1b\xa0\xcd\x06\xeb\xb4\x97\xa2\x10\x68\x0d\x6d\x0b\xab\x19\xa9\x12\x27\xbb\xde\x5f\x5f\x6a\x46\x33\x99\xf8\x63\x3d\xb1\x03\xe4\x62\x18\x12\xf9\x44\x3d\x3e\x52\x1c\x76\x51\xa3\x2a\x68\x69\x2a\xc3\xc6\x55\x51\x3d\x51\x88\xf2\x67\x0a\xed\x56\x34\xa5\xb7\xa4\x36\x58\x5a\x75\xa5\x2e\xd5\xe5\xc5\x85\x46\x8f\x0b\x63\x0d\x6f\x14\x6f\x3c\xc5\xe9\x05\xb4\xc6\x93\x7e\xc7\x50\x9c\x5c\x33\xa3\x5e\x97\x54\x71\x32\x00\x28\x28\x98\x27\x2a\xd4\x32\xb8\x72\xba\xcf\xe1\x8b\x73\x7c\xb1\x1f\x6b\xe6\x4a\x5f\x33\xbd\x06\x28\x59\xfa\xe0\x3c\x85\xb4\xd6\x7a\x02\x54\x58\x52\xf7\x5f\x4e\x92\xf0\xa7\x10\x39\x98\x6a\xd5\x2f\x06\xfa\xaf\x36\x81\x8a\x29\x2c\xd1\x46\xea\x1c\xeb\x52\x69\x5f\xc7\x6d\x67\x53\x31\xad\x28\x1c\xf1\x06\xd0\xc2\x2d\x07\x14\xf3\x01\x04\xc0\x47\x58\x05\x42\xa6\xa0\x5c\x50\xe2\x8a\x76\x0a\x57\x79\x5f\x8e\x93\x3b\xca\x22\x55\x7a\xb3\x13\xb4\x46\x8b\xe1\x63\x2d\x69\x9b\xf4\x46\x6f\x19\xc5\xe5\xe4\x0a\x7e\xfb\xfd\x47\xb6\x2a\x4c\xfc\x2a\x5a\xf8\xb1\x4b\xde\x20\x8e\xb4\xff\xa6\x21\xc0\x9f\x37\xd9\xa4\xa4\xf2\x7d\x8e\xdf\xaf\x47\xdd\xea\x51\x74\x59\xb1\x60\x51\x18\xa9\xcc\xac\xe3\x03\xa8\x9f\xaa\xc2\x3b\xf3\xba\x7a\x49\x96\xbb\x32\x97\x15\x76\xda\xd9\xd1\x52\xe7\x50\x3f\x73\x24\xed\x00\x6b\xcb\xb2\xaa\x7d\x07\xe8\x02\x6f\x83\x3d\xc8\xda\x2d\x2d\x8f\x50\x1e\x49\xd7\x61\x27\x6f\x0b\xe7\x2c\x61\x75\x34\x5d\x7d\x28\xc3\xe5\x3a\x58\xe5\x91\xd7\x27\x15\x72\xba\x89\x3a\xbd\x0d\x10\x7f\x73\xe1\xeb\xe9\x00\x83\x2b\x3d\x7c\xb9\xfb\xfb\xfa\xf1\x53\xde\x68\x1a\x30\xb2\x0b\xe7\xc2\x46\x57\x07\x3d\x42\xf0\x4f\x68\x4d\xa1\xe4\xb7\x16\xdd\xc0\x3f\xd9\xef\x03\x30\x86\x15\xf1\x07\xf0\x44\x01\xfe\x1d\xb0\xb6\xd3\xfb\x4a\xf4\xa7\xd7\x5b\x69\x2a\x65\xa9\x5a\x49\x1a\xfb\x8e\x07\x20\xaf\x45\xd8\xa8\xa8\xd7\x54\xe2\xd0\xfe\x59\x71\x73\x4f\xba\xd9\x40\x16\x62\x16\x52\x4d\x3d\xb0\xf1\x0a\x8b\x22\x50\xdc\x89\x34\x73\xf8\xf3\xb2\x9b\x5c\x17\x12\xd4\xc8\xe2\xeb\x9c\x1a\xeb\x5f\x60\xb6\xc6\x6a\x45\xd0\xad\x66\xd5\x4b\x52\x0b\xa3\x53\x52\x05\xa2\xa9\x31\x48\x80\x60\x38\x76\xf9\x02\xb7\x1c\x30\xb6\x5b\xc9\xe3\xca\xe7\xb9\x62\x87\x75\x7c\x90\xfb\xdc\xe0\x1a\xe3\x23\x9c\xdc\x22\xe3\x02\xe3\xd8\xa7\xb7\xa7\xe5\x08\xec\x43\xbd\xb0\x46\x9f\xc2\xf5\x2e\x45\x3d\xfb\xbc\xa6\x9e\xd6\x61\xa1\x26\xf2\xeb\xd8\xee\x2f\x4d\x88\x0c\xbe\x39\xbe\x33\x82\xa5\xab\xab\xe2\xf5\x15\xfe\x5c\xc9\x7f\xdd\xfc\x71\x37\x1b\xcd\xfb\x0b\xf3\xa5\x75\xc8\x82\x3a\x1d\xc0\x46\x1d\x8c\xe7\x66\x0a\xfb\x75\x00\x90\xd5\x44\x51\x6e\x82\xdc\x5c\x27\x5f\x24\xcb\x1e\xe2\xda\xd5\xb6\x80\x05\x01\x5a\xeb\x92\x6d\xd1\x2a\x0e\xa5\x82\x9d\x6d\xc4\x96\xcf\x83\xbb\x87\x8c\x83\x22\x54\x8c\xd1\x69\xd3\xd8\x7f\x33\xbc\x6e\xb0\x33\x13\x93\xb1\xda\x7b\x59\xf8\x91\x91\x65\x5c\x02\xfa\x2e\xe9\x32\x69\x0c\x44\xdb\x0d\x13\x32\x66\xbe\xa4\xf7\xc5\x95\x1f\xe5\x6c\xd7\xfc\x47\x0b\x5d\xfe\x02\xad\x4c\x94\xf7\xb9\x0d\xef\xf6\x7e\x7e\x5a\x97\xdc\x1b\xd5\x7e\xad\xde\xb7\xd7\x7f\x97\x99\x73\x7f\x44\x5d\x42\x6e\x44\x08\xb8\xb0\x63\x6b\xf2\xde\x15\x87\x10\xd3\xd6\xf9\xd3\xf9\x67\xb9\x70\xa3\xa9\xf9\x46\x52\x54\x9e\xcf\x18\x06\xbd\x36\x4c\x9a\xf7\xb4\xbe\x51\x89\x6e\x4c\x4f\x71\x94\x39\xb7\x7d\x55\x92\x12\x4f\x01\xe8\x3e\x9f\xb6\x7c\xf3\xf2\x2b\x13\x9e\x28\xea\xd8\xdc\x2a\x90\xc7\xcf\xf3\xd9\x35\x04\x31\x80\x59\xff\x3d\x06\x8f\x72\x58\x2a\x7d\x70\x52\xc0\x21\x1b\xa5\xf6\xbd\x6d\x14\x73\x7e\x9a\xee\x70\xe0\xf4\x79\x9a\xad\xc7\xcb\xec\x27\xf9\x4c\x6f\xbd\x91\x9e\x88\x95\xa6\xa3\x5f\x50\x7d\x3f\xe9\xa6\x82\x12\xbf\x9f\xe1\x9d\x17\x8e\x23\x1c\x20\x41\x1e\x6f\x5c\xbd\xcf\x97\xe7\xff\x01\x00\x00\xff\xff\xb0\x3e\x66\xe9\x9d\x0f\x00\x00")

func capability_typesBytes() ([]byte, error) {
	return bindataRead(
		_capability_types,
		"capability_types",
	)
}

func capability_types() (*asset, error) {
	bytes, err := capability_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capability_types", size: 3997, mode: os.FileMode(511), modTime: time.Unix(1476597229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _data_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x55\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\x07\x74\x41\x8b\x21\x3b\xf8\x36\xb4\x97\x5e\xb6\x61\xcd\x6d\x18\x04\xcd\x62\x12\x21\xb6\xa4\x91\x74\x86\xfc\xfb\xd1\x1f\x69\xdc\x45\x6d\xdc\x22\x40\x97\x43\x12\x90\x8f\x8f\x7c\x8f\x96\x2c\x91\x4b\x6b\x1c\xae\x7c\xf0\xe2\x63\x60\xb3\x43\x62\xfd\x53\x40\x9f\x62\x5f\xa7\x0a\xcd\xde\xd6\x95\xb9\x31\xd7\xe6\x7a\x36\x73\x56\xac\x91\x7d\x42\x2e\x66\xa0\x9f\x0e\x38\x6f\xa3\x5d\x70\xfe\x3d\x46\xe9\x33\x00\x0e\xb9\x24\x9f\xa4\x63\x5c\x6e\x10\x96\x5f\x1f\x6e\x3f\x03\x29\x04\xee\xb4\x02\x96\x5a\x02\xb6\xaa\x20\xca\x06\x69\x48\xff\xb2\x8c\xc7\x34\x2b\x0b\xf9\x1d\xc2\x8a\x62\x3d\xcb\xb6\xbc\x25\x74\x18\xc4\xdb\xea\xd8\xb8\x2d\x71\xa6\xad\x29\xb2\x23\x0e\xc0\x44\x31\x21\x89\x3f\xa8\x19\x62\x12\xcb\x58\x1d\x23\xda\x52\x0b\x0b\x60\x21\x1f\xd6\xa3\x30\xe1\xef\xc6\x6b\xf7\x02\x56\xb6\x62\x7c\xcc\x48\xdc\x62\xe8\x5c\x9a\x40\xa2\xfe\xdb\xa6\x92\x02\x92\x65\xfe\x13\xc9\x3d\xa5\x39\xcb\xb0\xc5\x3d\x9f\x82\x6a\x9b\x26\x0c\x0a\xa0\xc6\xd1\xde\x70\xb9\xc1\xda\x8e\x59\x9e\x69\xd6\x30\xd2\x1b\x8c\xc9\xee\x6d\xe9\x6b\xbc\x0f\x82\xb4\xbb\xd0\xe6\x58\x2c\x89\x11\xa5\x3d\x1d\xb1\x8d\x6a\xbe\xce\xbb\x22\xd4\x1c\x4d\xc1\xe0\xde\x4e\x92\x55\x1a\x50\x74\xb1\xdb\xf9\x97\xfe\xf7\x3e\xac\xe2\x45\x04\x0f\xbc\x26\xd8\xdc\xb4\xff\x6c\xe5\x00\xf6\xee\x2c\xd4\x3a\x47\xc8\x8c\x99\xe7\xaa\xf2\x2c\xaf\x7f\x7c\x5e\x74\xe5\x5b\x24\xb9\x98\x25\x49\xc9\xa6\xf9\xd1\x21\x27\x98\xf1\x0a\xdf\x6a\x5b\x9a\xc1\xbb\xff\xd0\xe3\x3b\x5c\xe5\x2d\xf6\x7a\x08\xd7\x48\x43\xae\xd4\x17\x81\x90\xd5\xe0\x68\xb4\x0f\x0a\x32\x64\xc3\x5a\xfb\xfd\x80\x9b\x2b\xf8\xb4\x58\x7c\x5c\xc0\xcf\xf3\x5d\x1f\x12\x96\xef\x77\x2f\x3f\x39\xd8\xa3\xbb\x56\xca\xf1\x19\xce\x4a\xee\x65\xeb\xdd\xe4\x9d\xd1\xef\x46\x67\x51\xe9\x8d\x4b\x57\x6d\xf5\x15\xf8\x75\x9d\xd4\x80\xc7\x51\x2c\xad\x51\x4e\x87\x1b\x9c\x9f\xf2\xd6\xe8\x18\x06\x97\x4f\x78\xba\xf0\xa4\x2b\xfd\x05\x35\xcf\x2c\xf1\x00\xe0\xd8\x50\x99\xe9\x3d\x5d\x43\xcf\xf0\x1e\x1a\xfe\x06\x00\x00\xff\xff\x2f\x6c\xda\xd7\xcd\x08\x00\x00")

func data_typesBytes() ([]byte, error) {
	return bindataRead(
		_data_types,
		"data_types",
	)
}

func data_types() (*asset, error) {
	bytes, err := data_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data_types", size: 2253, mode: os.FileMode(511), modTime: time.Unix(1476596059, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _group_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xbd\x6e\x04\x21\x0c\x84\x7b\x9e\xc2\x4f\x80\x2e\xed\x75\x51\x8a\x94\x91\x72\xdb\x23\x04\x26\x67\x89\xc5\xc8\x76\x4e\xda\xb7\x0f\xfb\xa7\x2d\x32\x15\x9a\x99\x6f\x00\x63\x4d\x31\x64\x2c\xd4\xc8\x88\x9b\x86\x17\x8a\x8e\xc3\x1d\xf6\x48\x69\xee\x15\xc3\x12\xe7\x1a\xde\xc2\x2d\xdc\x9c\xfb\x11\xfe\xed\xc1\x96\x8e\x7a\x77\x30\xb4\x35\xfd\x66\xab\xff\x66\xb6\xdd\x06\xc8\xa8\x49\xa8\xdb\xb6\x37\x3d\x11\xa6\xaf\xc7\xc7\x3b\x7c\xae\x4d\x98\xc6\x00\xc4\x5a\x81\xed\x89\xf2\x2f\xd2\x41\x0b\xbd\x10\x8a\xf0\x7c\xec\x51\x33\x94\x12\xd3\x79\xf1\xaa\x87\xc5\x96\xa3\xe4\xcb\x19\x0f\x1a\xfc\xf1\x01\x7f\x31\xbe\x71\x46\x5f\xa9\x60\x5a\x52\x45\x7f\x92\xee\x2f\x00\x00\xff\xff\xed\x2a\x99\xb7\x05\x01\x00\x00")

func group_typesBytes() ([]byte, error) {
	return bindataRead(
		_group_types,
		"group_types",
	)
}

func group_types() (*asset, error) {
	bytes, err := group_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "group_types", size: 261, mode: os.FileMode(511), modTime: time.Unix(1476598585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interface_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\xcd\x6e\xa4\x4a\x0c\x85\xf7\x3c\x85\x5f\xe0\xa2\xdc\x6d\x76\xa3\xac\x66\x15\x69\xd2\xfb\x92\x9b\x32\x8d\x25\x28\x23\x97\x9b\x88\xb7\x9f\xe2\xaf\x87\x26\x44\x53\x9a\x5d\x37\x3e\xfe\xce\xc1\x36\x26\xb1\x42\xe7\xa9\xe6\xc0\xc6\x12\xa2\x1b\x48\x63\xfa\xf1\x0a\x4b\x29\x72\xd7\xb7\xe4\x46\xec\x5a\xf7\xbf\x7b\x71\x2f\x45\xc1\xc1\x48\x6b\xac\xc8\xd9\xd8\x53\x7c\x2d\x60\xd1\x96\x8f\x42\x2c\x7f\x89\xd8\x54\x00\xf0\xa4\x3c\x90\x77\xb5\x4a\xb7\x42\x4b\x0a\xc6\x36\xce\xa2\x55\x13\x2b\xe5\xde\x66\xdf\x4b\x43\x70\x79\xff\x78\xfb\x01\x9a\xea\xf0\x73\x83\xc2\x25\xb9\x01\xb6\x2d\x88\x35\xa4\xab\xe6\x8a\x91\x0e\x9a\xb8\x7a\xc2\x64\x59\x9c\xa5\x0b\xe2\xa9\x6c\xb9\xa6\x6a\xac\x5a\x2a\x3f\x0c\x83\x47\xf5\xdf\x07\x3e\xbc\xd9\xac\xab\x94\xd0\x68\xe9\x39\xbc\xc2\x06\x84\x87\xc7\xaa\x06\xe9\x49\x71\x12\x95\x0b\x43\x42\xcd\xb7\xbb\xe6\x63\xb6\x86\x23\x29\x1a\xaa\xe5\x52\x66\xf1\x57\x82\xf4\xf9\x00\xe9\x8f\xfd\x9e\x5a\xca\x9f\xc7\xa2\xde\x33\xce\x16\xa5\xd4\xce\xd5\xd8\x70\x5f\xbe\x3d\x0f\x2b\x77\x4f\xbd\x92\x7b\x8c\xcd\x45\xb9\x6b\x75\x9e\xf2\x7d\xcb\x92\x60\x53\xd7\x7f\x7f\x86\x9d\x0e\x0e\x96\x4e\xa0\xe0\x7b\x49\x3e\xe5\x09\x3c\x8d\xf5\x46\xe7\x5b\xf8\x0b\x7c\xe9\x3c\xc2\x25\xda\xbf\x44\x4f\x6d\x59\xd9\x9f\xf1\xd9\xe1\xbf\xe2\x4f\xd3\xa3\xf7\xd9\xcc\x20\xc6\xf5\xb8\x8f\x3a\x7d\xa2\x20\x35\xe0\x06\x9f\x1f\x5c\x89\xc3\x6d\x22\x93\x87\x81\x31\x55\x9f\x2e\xe4\xe1\x9b\x3b\xaa\x9d\xef\xde\x66\xf6\xdd\x07\xf9\x6c\xb8\x6a\x80\x63\xfa\xf7\x09\x38\x20\xb7\x78\x4d\x47\xfc\x5d\x84\x85\xe5\xaa\x06\xc3\x8d\x7c\x76\x8c\xd5\x31\x4a\x47\xe9\x44\xa6\x4f\xc3\x46\x10\x05\x34\x53\xbe\xde\x6d\x0e\xb6\xcb\xba\xf2\x67\xbc\x52\x27\x43\xfe\x12\x17\xf9\xf3\x74\xcb\xe2\x77\x00\x00\x00\xff\xff\xca\x8d\x54\x44\x0e\x06\x00\x00")

func interface_typesBytes() ([]byte, error) {
	return bindataRead(
		_interface_types,
		"interface_types",
	)
}

func interface_types() (*asset, error) {
	bytes, err := interface_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interface_types", size: 1550, mode: os.FileMode(511), modTime: time.Unix(1476597686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xe7\x29\x08\xec\xa5\x05\x36\x42\x16\xe8\xc9\xb7\x38\xde\xb6\x0b\x74\xe3\x60\x9d\x45\x0f\x8b\x85\x40\x93\x94\xcd\x2e\x45\xaa\x24\x95\xc4\x3d\xf5\x35\xfa\x7a\x7d\x92\x0e\x29\x8a\xd6\x9f\x2d\xd9\xd9\x04\xf5\x25\x8a\x34\x7f\x9c\xf9\xbe\xe1\x90\x56\x19\x82\x53\xca\x32\x2e\xb9\xe5\x4a\x9a\xf4\x81\x69\x03\x0f\x33\x54\x7d\x32\x3c\x2f\x04\x4b\x77\x38\x17\xe9\xbb\xf4\x2a\xbd\xba\xb8\x90\x8a\xb2\xd4\xee\x0a\x66\x66\x17\xa8\x12\x4b\xdc\x3b\x93\xac\xac\xd2\x78\xc3\x92\xb9\x50\xe4\x5b\xf8\xc7\xc9\x20\x44\x99\xe6\x0f\x8c\xa6\x99\x56\xf9\xac\xa5\xf3\x49\x29\xeb\x45\x0a\xad\x0a\xa6\x2d\xaf\xcc\xba\x9f\xe1\x7f\xb1\xfa\x19\x1c\x81\xc7\x19\x02\x45\x81\xf5\x65\x09\xe1\x26\xee\x7b\xfc\x4c\x20\x78\xab\x31\x97\xd6\xec\x75\x10\xba\x44\x1b\xcd\xb0\x65\x3a\x55\x3a\x65\x7f\x96\x58\xcc\xd0\x3b\xf4\x71\x1e\x44\x1e\x94\x28\x73\x96\x72\xda\xf3\x63\x35\x97\x9b\xf8\x52\x83\x2a\xd7\x8c\xce\x50\x86\x85\xa9\xbd\x1a\x89\x0b\xb3\x55\xf6\x3c\x7d\x82\x0b\xbc\xe6\x82\x37\x97\x8c\xad\xc5\x64\x9b\x33\x69\xbb\x06\xab\x9c\x35\x75\x92\xeb\x28\x7c\xd1\x29\xc4\x8d\xca\x8b\xd2\x4e\xcf\x3d\xb8\xd5\x7c\x0d\x1a\x31\x90\x02\x74\x20\x6d\x29\xa6\x54\x33\x63\x8e\x2e\xaf\x28\xd7\x82\x93\x49\xa2\x92\xd9\x47\xa5\xbf\xf5\x84\x72\x5c\xc4\x37\xb0\x1e\xbd\x4b\x0d\xd9\xb2\x1c\x37\x4b\xd9\xcc\x03\xc5\x16\x7b\x08\x26\xc1\x62\x72\x5b\xfd\xfd\x20\x33\x55\x87\xa5\xb4\x7d\x01\x47\x77\x60\x36\x7a\x09\x75\x75\x35\x88\xae\x2e\x11\xc0\x1f\x8b\xd4\x34\x09\x50\xfd\x62\xf9\x76\x63\x05\xdd\xeb\xb8\x52\xb5\xcb\xd6\xa4\x57\x43\x50\x33\x81\x3d\x87\xb7\xbc\xa8\x15\x9a\xef\x6a\xfb\xcc\xdc\xab\x86\x9a\x22\xa4\xd4\x9a\x49\x02\xc5\x47\x5f\xae\xde\xa2\xcf\xb7\xf3\xe5\xe7\xdb\xc5\xfb\xc5\xd7\x83\x30\xdd\x2a\x33\x05\xa0\x37\x4a\x5a\x60\x24\xd3\x51\xf4\x01\x0b\x4e\x53\xa3\x4a\x4d\xea\x1e\x82\xbe\xb4\x5a\x88\xca\xec\x23\xd6\xcc\x21\x58\x49\xc8\xc4\xd7\x8b\xba\x58\xb4\x50\x7c\x12\x2f\xde\x07\xd1\xe4\x9a\xe6\x5c\x06\x79\xd5\x83\xc2\x80\xe6\x12\x3a\x10\xe4\x4b\x6e\x56\x3b\x63\x59\x5e\xd3\xdc\xf5\x9c\xb5\xe8\xf5\xa2\x01\x03\xab\x20\x1a\x24\xd7\x5c\x52\xb0\x36\x41\xb1\x46\xd7\x1c\x34\xbc\x81\x1e\xa3\x43\x2a\x93\xeb\xa2\x00\xb6\xf9\xaa\x4e\xe6\xf7\x30\x4c\xdb\x55\x1c\x45\x67\xbf\x9a\x43\xe0\xdc\x07\xfa\xa9\x94\x96\xe7\xa7\x21\xf4\x57\x08\x89\xd1\xa5\x8c\x31\x9e\x4e\xa2\x36\x31\x2e\xeb\x96\x73\x82\x05\xc0\xcf\x9d\xc3\xcf\xe1\x1a\x84\xa5\x8d\xe5\xbf\x07\xe6\xef\x4d\xa8\x73\x90\xd9\x59\xd4\x02\x1a\xdc\x1a\x9b\xe7\xec\xd3\x12\xe7\xfd\x7d\xba\xbd\xff\x81\x05\xa2\x79\x61\xab\xc9\x62\xcb\xa0\x45\x6e\x00\xc4\xc2\xeb\x22\x95\xf9\x77\x34\x84\xd2\xe8\xdf\x5d\xb3\x50\x15\xb6\x69\x20\xb0\x67\xd7\x29\xf9\x87\x52\xc2\x5a\xc4\x0e\x82\x88\x76\x91\x61\xfa\x81\x13\x86\x1e\xb9\x10\x48\x70\x80\x9a\x84\x35\xa2\x4c\x69\x2f\x13\xac\x96\x20\x76\xea\x72\x94\x7f\x86\xf5\x38\x65\x84\x09\x51\x80\x90\x6a\x71\xce\xfa\x62\x8e\xb0\xeb\x45\xdc\x8d\x28\x4e\x72\x64\xb0\x28\xb0\x31\x00\xda\xb1\xa9\xe2\x70\x18\xb5\x01\xef\xdd\x7d\x81\x08\x9a\xa1\x1d\xf5\xff\x8a\xdd\x62\x31\xff\xb8\x3a\xbf\x41\x0c\x31\xa9\x2e\x76\x7a\xce\x86\x51\x93\xa1\x47\x12\x08\xf3\x3c\xb2\xf7\xd9\xa2\x81\x48\xe9\xc4\x02\x0f\xa3\xe3\x58\xe1\x9d\xf5\xa1\xea\x7f\x5c\xd5\xe8\x3f\x81\x5d\x93\xdd\x47\xd6\x35\x1d\x1d\xa2\x19\xc2\x92\x7a\xd3\xcc\x58\xf3\x4a\x23\xc6\x60\xcb\x43\x5f\xbb\x75\xfe\x4d\x61\x3a\x87\x3e\x09\xc3\x90\x7e\x46\x43\xc4\x62\xa3\x34\xb7\xdb\xfc\xcc\xf2\x1a\x98\x39\x4b\x08\x9b\x3d\x81\x61\xee\x78\x88\xc5\xc1\x44\x11\xc1\xa7\x1d\x17\x22\xca\xef\xfc\xbc\x1e\x15\xc6\x06\xc0\xc1\x8a\xff\x2c\x94\x1f\x94\xd0\x0f\x1f\xee\x7e\x0c\x31\xfc\xfb\xf7\x3f\x06\x29\x59\x21\xc2\xfb\xa8\x37\x5f\x08\x5c\xba\x13\x9a\x64\x04\x70\x72\x6c\x74\xc6\xdd\xe9\x26\x2c\x72\x74\xc7\xf6\x4b\x3b\xa9\x95\x7c\x52\xee\xc0\x73\xd2\x2c\x3c\x90\x8c\x9b\x6a\x55\x5c\x79\x8c\x03\xf1\x11\xc0\x3c\x57\xda\x6d\x71\x98\xa2\x75\x85\x26\xda\x5c\x98\xe9\xc2\xae\x3e\x37\x2f\xd7\x7f\x80\xa9\xe7\x1f\x9c\x47\x37\xe4\x97\x3a\x59\x5f\xa1\x5f\xea\x93\x75\x8e\x9f\x5e\xdc\xcb\x10\x1d\xc2\xc0\x78\x4e\xfb\xef\x96\xc5\x65\xf8\x70\x15\x00\xb7\x00\xc7\x7d\x19\x5a\xa8\xb8\x07\x0a\xdc\x2f\x57\x37\xd7\xe8\x16\x4c\xa1\x7b\x70\x0d\x5d\x41\x20\x05\xdc\xd0\xe1\x8b\x6f\x41\xf1\xb3\x09\x4e\x90\xf3\x71\xe0\x50\x5e\x5d\xc9\x8c\x5c\x36\x54\x42\xe3\x10\x80\x1e\x73\x4c\x62\x28\xb7\x19\x54\xa2\xd4\x53\xa6\x4d\xb7\xac\x23\x2c\xa7\xac\x80\xfa\x00\xcf\x76\x27\x90\x3c\xda\xac\x7e\xfd\x61\x22\x96\xa2\xfa\x8d\x77\x80\x85\x0f\xc3\x2c\xe5\xc1\x16\x80\x9a\x3d\x00\x55\x4d\xc0\xed\x92\x3a\xc3\x64\x9f\x97\x95\x85\x2d\x0d\xf7\x77\xf3\xca\xe7\x5e\xde\xc7\x99\x08\x9e\x31\xb2\x23\x82\x25\xb5\x5e\xaf\x1f\x74\x47\x89\x67\xf4\x82\x37\x88\xaa\x1c\x68\x75\x69\x0a\x46\x78\x06\x3d\xd9\x04\xeb\x40\xb9\x60\x1e\x85\x4b\xbf\x7a\x47\xa9\xdf\xc7\xcb\xc0\xce\xba\xda\xe2\x87\xf6\x31\x3f\xf1\xa6\x04\xde\x3b\xaa\x00\x71\x07\xb3\xb3\xbf\x60\xb9\x89\x92\xff\x97\xe9\x34\x5c\xa3\x9d\x37\xa0\x76\x6a\xfa\x3b\x5b\x9f\x73\x72\xef\x17\x14\x1a\xa5\x65\x4f\x36\xd5\xb1\x3b\xed\x53\x3a\xc2\x5f\xd8\x83\xce\xea\x8b\xaf\x9c\x76\x48\xd5\x0a\x46\xc8\x96\xd4\xb3\x12\x5f\x59\xfb\x7e\xa7\xf5\x37\xe8\xae\xba\x1e\x7d\x8b\x04\xde\x41\x43\xff\x29\x5e\x4f\x99\xc6\x31\x64\x9f\xeb\x09\x33\x4b\xc5\x96\x49\x1a\xad\x7b\xad\x17\x9c\x93\xdb\x90\x85\xee\xf7\x5f\x00\x00\x00\xff\xff\xee\xe2\x99\x7f\x2e\x18\x00\x00")

func node_typesBytes() ([]byte, error) {
	return bindataRead(
		_node_types,
		"node_types",
	)
}

func node_types() (*asset, error) {
	bytes, err := node_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node_types", size: 6190, mode: os.FileMode(511), modTime: time.Unix(1476598515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _policy_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x92\x41\x6a\xf4\x30\x0c\x85\xf7\x39\x85\x4e\x30\xcc\xbf\xcd\xee\xa7\x07\x68\xe8\xa4\x6b\x63\x6c\x25\x11\x38\x96\x2b\x39\x03\xb9\x7d\x1d\xa7\x65\x0a\x0d\xb4\xcc\xa2\x93\x55\xd0\xf3\x7b\xef\xb3\x70\x66\x75\xd6\x78\x1c\x28\x52\x26\x8e\x6a\xae\x28\x5a\x7e\x5a\xd8\x25\xa5\x39\x05\x34\xab\x9d\x83\xf9\x67\xce\xe6\xdc\x34\x89\x03\xb9\xd5\xe4\x35\xa1\xb6\x0d\x94\xaf\x1e\x3d\xd5\x39\xa1\x9e\x5e\x98\xf3\x2e\x00\x78\x54\x27\x94\x72\x8d\xec\x27\x84\xfe\xf9\xf2\xf4\x1f\xba\x9a\x01\x7d\xc9\x00\x1b\x02\x70\x9e\x50\xbe\x6b\x5a\xfc\x42\x57\x84\x41\x78\x6e\x8e\xba\xba\x60\x1d\xce\x18\xbf\x14\x6e\x06\x6f\x36\x47\x7b\x44\xf6\x7b\xb0\xdb\x5a\x20\x4f\x36\x03\x29\x2c\x8a\xbe\x84\xc2\xc8\x65\x4f\x11\xd2\x67\x3b\xf0\xf0\x11\x10\xb9\x24\x03\x0b\x8c\xc2\x4b\xd2\x4d\xa8\xa3\xd3\x21\xfe\xc5\xd9\x40\x71\x7c\x08\xbc\xee\xdd\xf7\xa2\xbf\x26\x6f\x33\x3e\x84\x7c\xa9\xd5\xf7\x82\x77\x28\x03\xcb\x6c\xa3\xfb\x63\x7a\x8f\x2e\x58\x41\x48\x37\x00\x10\x7c\x5b\x48\xea\x1b\x52\x28\xd3\x1f\x6f\xf4\x1e\x00\x00\xff\xff\x8b\xf6\x26\x41\xb2\x03\x00\x00")

func policy_typesBytes() ([]byte, error) {
	return bindataRead(
		_policy_types,
		"policy_types",
	)
}

func policy_types() (*asset, error) {
	bytes, err := policy_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "policy_types", size: 946, mode: os.FileMode(511), modTime: time.Unix(1476598789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _relationship_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xcd\x6e\xdb\x30\x0c\xbe\xe7\x29\xf8\x02\x0b\xda\xab\x6f\x45\x36\x60\xa7\x15\xe8\x72\x1b\x06\x81\x91\xe8\x98\x80\x2c\x69\x14\x13\xa0\x6f\x3f\xda\x4e\xe2\x6e\x99\xb3\xad\x40\x6e\x89\xf9\x91\xdf\x8f\x48\xcd\xd5\xa3\x0b\xd4\x72\x62\xe5\x9c\xaa\x3b\x92\x54\xfb\xd1\xc0\x54\xaa\xdc\x97\x48\xee\x15\xfb\xe8\x1e\xdd\x83\x7b\x58\xad\x84\x22\x8e\xd8\x8e\x8b\xd3\xd7\x42\xb5\x59\xc1\x04\x5f\xbf\xad\xd5\xf5\x93\x2a\xfa\x8e\xea\x36\x0f\x08\x80\x40\xc2\x47\x0a\xae\x95\xdc\x37\x7f\xec\x78\xc9\x59\x47\xe8\x11\x23\x07\xa7\x28\x7b\xd2\x13\x09\x7c\x3b\xb5\x78\x2c\xb8\xe3\x68\x82\xe9\xcc\xd1\x53\x52\xf8\x3e\x76\x16\xc9\x85\x64\xa8\x4d\xa4\x00\x31\xfb\x91\xe2\xfc\xdf\xc4\xda\xc0\x06\xaa\x0a\xa7\xfd\xe5\xa3\x37\x11\x2a\xc8\x49\xeb\x8c\x04\xf8\x00\x3d\x27\x17\x29\xed\xb5\x6b\xe0\xf1\x54\x09\x74\x64\x4f\x7f\x99\x28\xf4\xe3\xc0\x42\xa1\x81\x16\x63\xa5\xd5\x42\x4c\x9b\x9c\x12\x79\xbd\x6b\x4c\x9f\x52\x28\x99\x6f\x84\xe4\x4d\xa7\x85\xc8\x18\x7f\x37\x35\x4d\x0b\xa8\x38\x12\xac\x37\x17\xe4\xff\x1a\xfd\x48\x85\x52\xa8\xcf\xe9\x7e\x3e\xbf\xe4\x40\xe6\x71\x41\xc0\xe7\x5c\x95\xc2\x3d\xf9\xed\x2d\xd5\x56\x88\x64\x59\xc4\x30\xf4\x2c\xa0\x7a\xe1\x32\xee\x26\x6c\x3b\x82\xed\xf3\xd7\xcd\x13\x88\x01\xe0\xe5\x4d\x0f\x6c\x8d\x11\x30\x46\xc8\xda\xd9\xe8\x09\xb6\xc3\x4a\xd7\xb0\x7a\xb2\x05\x83\xab\x91\x05\xd5\xb6\x72\x77\xd0\xf9\xad\xa7\xd3\xe6\x70\x73\x7d\x27\x50\xc2\xfe\xd6\x96\xdb\x46\x91\xb4\xe8\xe7\xd9\x16\x40\xcb\xfb\x83\x5c\x75\x4d\x51\xcc\x0d\xbf\xa4\xb2\xbe\xb4\x2d\xa7\x36\x38\xf8\xf7\x13\x99\x8f\xea\xdd\x87\xf2\x33\x00\x00\xff\xff\xbd\xb7\xed\x14\x1d\x05\x00\x00")

func relationship_typesBytes() ([]byte, error) {
	return bindataRead(
		_relationship_types,
		"relationship_types",
	)
}

func relationship_types() (*asset, error) {
	bytes, err := relationship_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "relationship_types", size: 1309, mode: os.FileMode(511), modTime: time.Unix(1476597491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"artifact_types":     artifact_types,
	"capability_types":   capability_types,
	"data_types":         data_types,
	"group_types":        group_types,
	"interface_types":    interface_types,
	"node_types":         node_types,
	"policy_types":       policy_types,
	"relationship_types": relationship_types,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"artifact_types":     &bintree{artifact_types, map[string]*bintree{}},
	"capability_types":   &bintree{capability_types, map[string]*bintree{}},
	"data_types":         &bintree{data_types, map[string]*bintree{}},
	"group_types":        &bintree{group_types, map[string]*bintree{}},
	"interface_types":    &bintree{interface_types, map[string]*bintree{}},
	"node_types":         &bintree{node_types, map[string]*bintree{}},
	"policy_types":       &bintree{policy_types, map[string]*bintree{}},
	"relationship_types": &bintree{relationship_types, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
