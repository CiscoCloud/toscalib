tosca_definitions_version: tosca_simple_yaml_1_0

description: >
  TOSCA simple profile with wordpress, web server and mysql on the same server.

# Repositories to retrieve code artifacts from
repositories:
  docker_hub: https://registry.hub.docker.com/

imports:
  - tests/custom_types/custom_policy_types.yaml

topology_template:

  inputs:
    wp_host_port:
      type: integer
      description: The host port that maps to port 80 of the WordPress container.
    db_root_pwd:
      type: string
      description: Root password for MySQL.

  node_templates:
    # The MYSQL container based on official MySQL image in Docker hub
    mysql_container:
      type: tosca.nodes.Container.Application.Docker
      capabilities:
        # This is a capability that would mimic the Docker â€“link feature
        database_link: tosca.capabilities.Docker.Link
      artifacts:
        my_image:
          file: mysql
          type: tosca.artifacts.Deployment.Image.Container.Docker
          repository: docker_hub
      interfaces:
        Standard:
          create:
            implementation: my_image
            inputs:
              db_root_password: { get_input: db_root_pwd }

    # The WordPress container based on official WordPress image in Docker hub
    wordpress_container:
      type: tosca.nodes.Container.Application.Docker
      requirements:
        - database_link: mysql_container
      artifacts:
        my_image:
          file: wordpress
          type: tosca.artifacts.Deployment.Image.Container.Docker
          repository: docker_hub
      interfaces:
        Standard:
          create:
            implementation: my_image
            inputs:
              host_port: { get_input: wp_host_port }

  policies:
    - max_avg_requests_exceeded:
        type: my.policies.types.Performance
        targets: [ wordpress_container ]
        properties:
          metric_name: requests_per_minute
        triggers:
          scale_up:
            condition:
              constraint:
                greater_than: 500
              method: average

    - min_avg_requests_exceeded:
        type: my.policies.types.Performance
        targets: [ wordpress_container ]
        properties:
          metric_name: requests_per_minute
        triggers:
          scale_down:
            condition:
              constraint:
                less_than: 50
              method: average

    - begin_of_month:
        type: my.policies.types.UpdateScalingConstraints
        targets: [ wordpress_container ]
        properties:
          min_instances: 1
          max_instances: 5
          default_instances: 2
        triggers:
          update_node:
            schedule:
              start_time: 2016-04-01T00:00:00Z
              end_time: 2016-04-25T00:00:00Z

    - end_of_month:
        type: my.policies.types.UpdateScalingConstraints
        targets: [ wordpress_container ]
        properties:
          min_instances: 5
          max_instances: 8
          default_instances: 5
        triggers:
          update_node:
            schedule:
              start_time: 2016-04-25T00:00:00Z
              end_time: 2016-05-01T00:00:00Z
