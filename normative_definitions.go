// Code generated by go-bindata.
// sources:
// NormativeTypes\tosca.capabilities.Attachement
// NormativeTypes\tosca.capabilities.Container
// NormativeTypes\tosca.capabilities.Endpoint
// NormativeTypes\tosca.capabilities.Endpoint.Admin
// NormativeTypes\tosca.capabilities.Endpoint.Database
// NormativeTypes\tosca.capabilities.Endpoint.Public
// NormativeTypes\tosca.capabilities.Network.Bindable
// NormativeTypes\tosca.capabilities.Node
// NormativeTypes\tosca.capabilities.OperatingSystem
// NormativeTypes\tosca.capabilities.Root
// NormativeTypes\tosca.capabilities.Scalable
// NormativeTypes\tosca.interfaces.node.lifecycle.Standard
// NormativeTypes\tosca.interfaces.relationship.Configure
// NormativeTypes\tosca.nodes.BlockStorage
// NormativeTypes\tosca.nodes.Compute
// NormativeTypes\tosca.nodes.Container.Application
// NormativeTypes\tosca.nodes.Container.Runtime
// NormativeTypes\tosca.nodes.DBMS
// NormativeTypes\tosca.nodes.Database
// NormativeTypes\tosca.nodes.LoadBalancer
// NormativeTypes\tosca.nodes.ObjectStorage
// NormativeTypes\tosca.nodes.Root
// NormativeTypes\tosca.nodes.SoftwareComponent
// NormativeTypes\tosca.nodes.WebApplication
// NormativeTypes\tosca.nodes.WebServer
// NormativeTypes\tosca.relationships.AttachesTo
// NormativeTypes\tosca.relationships.ConnectsTo
// NormativeTypes\tosca.relationships.DependsOn
// NormativeTypes\tosca.relationships.HostedOn
// NormativeTypes\tosca.relationships.Root
// NormativeTypes\tosca.relationships.RoutesTo
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _toscaCapabilitiesAttachement = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\x73\x2c\x29\x49\x4c\xce\xc8\x4d\xcd\x2b\xb1\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\x3c\x28\x3f\xbf\x84\x0b\x10\x00\x00\xff\xff\xa0\x99\x08\x90\x47\x00\x00\x00")

func toscaCapabilitiesAttachementBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesAttachement,
		"tosca.capabilities.Attachement",
	)
}

func toscaCapabilitiesAttachement() (*asset, error) {
	bytes, err := toscaCapabilitiesAttachementBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Attachement", size: 71, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesContainer = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x8e\x31\x4e\xc3\x40\x10\x45\x7b\x4e\x31\x17\x88\x45\xda\x2d\xa1\x80\x86\x86\x0b\xac\x86\xf5\x4f\x34\xc2\xde\x59\x66\x67\x91\x92\xd3\xb3\xb6\xac\x48\x48\xd0\x59\x29\xe7\xcf\xfb\x7a\xdf\xb5\x26\x1e\x12\x17\xfe\x90\x49\x5c\x50\x87\x67\xcd\xce\x92\x61\xe1\x81\x68\x84\xc9\x37\xc6\x78\x32\x9d\x03\xfd\x41\xbf\xab\x7a\xe7\x8a\x69\x81\x2d\xc9\xd2\x22\xca\x6d\x8e\xa9\xb4\xed\x22\xf2\x4b\x41\x20\xc9\x8e\x33\x6c\xcb\x0c\x5f\x4d\x0c\x63\xa0\x13\x4f\x15\x5b\x9a\x34\x57\xb7\x3e\xc0\x6f\x65\xa2\x03\x9d\x0d\xec\xb0\xa8\x16\x7b\x8d\xa7\x40\xc7\xf5\xdb\x25\x7d\x5c\x8f\x90\xd3\xe5\xb7\xad\x6f\x9d\xd8\x0e\x2d\x8b\x0f\x37\x64\x1f\xf7\xe3\x70\xa4\x97\xd7\xeb\xca\x8c\x52\x3f\x63\x95\x2b\xfe\xb7\x2f\xdf\x9d\xc4\xf4\xf6\xb4\x02\x33\xe6\xfb\x4a\x7f\x02\x00\x00\xff\xff\x5e\xc5\xf5\x65\x2a\x02\x00\x00")

func toscaCapabilitiesContainerBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesContainer,
		"tosca.capabilities.Container",
	)
}

func toscaCapabilitiesContainer() (*asset, error) {
	bytes, err := toscaCapabilitiesContainerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Container", size: 554, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesEndpoint = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xb1\x4e\x03\x31\x0c\x86\x77\x9e\xc2\x0f\x50\x2a\xb1\xde\x86\x44\x07\xb6\xaa\x20\x16\x84\x22\x37\xf1\xb5\x11\xb9\x38\x38\x4e\x51\xdf\x9e\xb4\xbd\x72\x1c\x3a\x2a\x60\x89\x94\x5f\xff\x17\x3b\xbf\xad\x9c\x2d\xce\x2d\x26\x5c\xfb\xe0\xd5\x53\x9e\x2f\xa2\x4b\xec\xa3\x36\x57\x00\x8e\xc4\xef\xc8\x99\x56\xb8\x6b\x60\xc2\xbc\x62\xd6\xea\x4b\xc2\x89\xe4\xa0\x1c\xa8\xe3\x5d\xd9\x72\x38\xdd\x00\x74\x9f\xa8\x81\xac\xe2\xe3\xa6\x97\x1c\xb5\x58\x82\xd6\x57\x6d\x3a\x31\x2c\x3a\xf6\x2f\xab\x72\x47\x6d\xaf\x09\xbd\x15\x2f\xe4\x1a\x68\x31\x64\x3a\xaa\x99\x6c\x11\x1a\x53\x6b\xe6\x40\x18\xbf\x97\x19\xa0\x22\xc1\x24\xd4\xed\x85\xe6\xa6\x6a\x1d\xfa\x33\x11\x3b\xfa\x23\x17\x49\xdf\x59\x5e\xff\x83\x7e\x69\x7f\xb9\xba\x7f\xba\x7d\x5c\x1c\x65\x1f\x6b\xf8\xa8\x2c\xbf\x89\x37\x73\x11\x7b\x7e\xce\x72\xac\x2e\xac\xd3\xcd\x67\x16\xe0\x1a\x76\x18\xbc\x33\xf5\x2c\x75\x80\xf0\xdc\x33\x33\x50\x94\x0d\xe9\x0c\x12\x91\xc0\xcb\x67\x0a\x79\x5c\xb7\xc3\x74\xf1\x0f\x3f\x14\xed\x7c\x34\x81\xe2\xa6\x0e\x02\x6e\x7a\x9d\xa2\xca\xde\x64\xbb\xa5\x0e\x07\xef\xb0\x0d\x0f\x89\x6c\x95\x51\xeb\x57\xd7\x45\xcf\xeb\xe6\x93\x41\xe7\x84\x72\x9e\x4c\xe4\x23\x00\x00\xff\xff\x0d\xf3\x53\x37\xe5\x02\x00\x00")

func toscaCapabilitiesEndpointBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpoint,
		"tosca.capabilities.Endpoint",
	)
}

func toscaCapabilitiesEndpoint() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint", size: 741, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesEndpointAdmin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xce\x41\x0e\x02\x21\x0c\x85\xe1\xfd\x9c\xe2\x25\xee\xe7\x00\xec\x8c\xf1\x1c\xa6\x42\xd1\x26\x0c\x25\xa5\x78\x7e\xc1\xe8\xd6\x6d\xd3\xff\xcb\x73\xed\x91\xf6\x48\x8d\xee\x52\xc4\x85\xfb\x7e\xad\xa9\xa9\x54\xdf\xcf\xe9\x90\x1a\x36\x20\xb1\xc9\x8b\xd3\x2d\x9b\x1e\x01\x7f\x92\xf9\x7b\xc2\xe5\x49\xf5\xc1\xf8\xdd\xd0\x39\x0e\x63\x48\x4d\x12\xc9\xd5\x26\x00\xb7\xc1\x58\x1c\xc4\xfb\xf4\x33\x8d\xe2\xd0\x8c\x4c\xa5\xf3\x64\x9a\x69\x63\x5b\xf8\x1a\x80\x2f\x12\x3e\xe1\xf6\x0e\x00\x00\xff\xff\xa2\x6a\xa2\x81\xb5\x00\x00\x00")

func toscaCapabilitiesEndpointAdminBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointAdmin,
		"tosca.capabilities.Endpoint.Admin",
	)
}

func toscaCapabilitiesEndpointAdmin() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointAdminBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Admin", size: 181, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesEndpointDatabase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\x73\xcd\x4b\x29\xc8\xcf\xcc\x2b\xd1\x73\x49\x2c\x49\x4c\x4a\x2c\x4e\xb5\xe2\x52\x00\x83\x94\xd4\xa2\xcc\xb2\xd4\x94\xf8\xb4\xa2\xfc\x5c\x2b\x05\x3c\x3a\xb9\x00\x01\x00\x00\xff\xff\x6b\xd3\x2d\x74\x56\x00\x00\x00")

func toscaCapabilitiesEndpointDatabaseBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointDatabase,
		"tosca.capabilities.Endpoint.Database",
	)
}

func toscaCapabilitiesEndpointDatabase() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointDatabaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Database", size: 86, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesEndpointPublic = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfc\x0a\x4b\xdc\xfb\x03\x7a\xe0\xc0\xe0\x30\x09\xa1\x49\xc0\x79\x72\x1b\x77\xb5\xc8\xe2\x10\x3b\x0c\xfe\x3d\x69\x9a\x4d\x20\xa1\xdd\xa2\xe7\x97\xf7\x3e\xdb\x44\x47\xec\x46\x8c\x38\xb0\x67\x63\xd2\xee\x31\xb8\x28\x1c\xac\xdb\xe5\xc1\xf3\xd8\xdf\x00\x38\x4a\xfc\x49\x6e\x3f\x25\x39\xf6\x70\xe5\x4f\xf1\xc6\x24\x91\xd2\xa2\x2e\x3f\x01\x6e\x61\x33\x63\x38\x10\xd8\x4c\x25\x68\xc2\xec\x0d\x02\xd9\x49\xd2\xfb\x3e\xe0\xb1\x0c\x04\xb2\xae\xf3\x89\x93\x1a\xc4\x5a\x7c\x36\xc1\x24\x39\xb8\x9a\xf5\xfb\x5b\x0f\xbb\xb7\xfb\xa7\xed\xa6\x0e\x26\x2f\x68\x1c\x0e\x6b\xe5\x02\xac\x63\xe2\x68\x2c\xa1\x87\xbb\x26\x02\x70\x70\x3c\xa2\x91\x96\x32\xb4\xda\xd8\xba\xd0\xb9\x44\xaa\xa0\xb3\x64\xef\x60\x20\x40\xef\x65\xf1\x3a\x58\xb6\x06\x84\x28\xe2\x41\xa6\x4b\x17\x6c\x77\x2d\x07\x53\xb1\xab\xca\xc8\xd5\x7f\x62\x9b\x6b\x76\xc3\xed\x5a\xbf\x7d\xc7\x42\x3d\x94\x18\xc2\x70\x01\xad\x07\xe9\x61\x42\xaf\xd4\x44\x35\xb4\xac\x3d\xd0\x57\xb9\x24\x1f\x29\x18\xfa\x3a\x72\x41\xd7\xdd\xff\x5b\xf3\xb5\x34\x4a\x7d\xa3\x87\xf3\x61\x13\x1d\x58\x8d\xd2\x0a\xf5\xf0\xfc\xf2\x87\x45\x2d\x95\x45\x9a\x94\xe8\x23\x73\x22\xd7\x58\x8a\x72\x0d\xe7\x27\x00\x00\xff\xff\x92\x1f\xb2\x91\x39\x02\x00\x00")

func toscaCapabilitiesEndpointPublicBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointPublic,
		"tosca.capabilities.Endpoint.Public",
	)
}

func toscaCapabilitiesEndpointPublic() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointPublicBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Public", size: 569, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesNetworkBindable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\xcb\x4b\x2d\x29\xcf\x2f\xca\xd6\x73\xca\xcc\x4b\x49\x4c\xca\x49\xb5\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\xc9\x2f\x3f\x25\x95\x0b\x10\x00\x00\xff\xff\x4a\x92\x65\xcf\x4d\x00\x00\x00")

func toscaCapabilitiesNetworkBindableBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesNetworkBindable,
		"tosca.capabilities.Network.Bindable",
	)
}

func toscaCapabilitiesNetworkBindable() (*asset, error) {
	bytes, err := toscaCapabilitiesNetworkBindableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Network.Bindable", size: 77, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesNode = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\xf3\xcb\x4f\x49\xb5\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\x30\x28\x3f\xbf\x84\x0b\x10\x00\x00\xff\xff\xde\x35\xde\x26\x41\x00\x00\x00")

func toscaCapabilitiesNodeBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesNode,
		"tosca.capabilities.Node",
	)
}

func toscaCapabilitiesNode() (*asset, error) {
	bytes, err := toscaCapabilitiesNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Node", size: 65, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesOperatingsystem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xcd\xc1\xad\x83\x40\x0c\x84\xe1\x3b\x55\xb8\x02\x0a\xd8\x26\x9e\xf4\x52\x40\x64\x76\x87\xc4\x12\xe0\x8d\x6d\x90\xe8\x3e\xa0\xa0\x5c\x92\x1c\xb8\xfe\x9a\x4f\x13\xea\x99\xdb\xcc\x95\x3b\x19\x24\x04\xde\xfe\x55\x18\x87\x4c\xb7\xcb\xea\x81\x31\x35\x44\x05\x26\x0b\xca\xb5\x37\x1d\x13\x7d\x31\xff\xaa\xb1\xed\xaa\xe9\x86\xf7\xb2\x2b\x22\xb6\x7c\x97\x40\x8e\xd9\xf0\x2a\x44\xb1\x56\x24\xf2\xb0\xed\xe1\x48\x86\xc7\x2c\x86\x92\xa8\xe7\xc1\xd1\xbc\x67\xe7\x48\x91\x7d\xd2\xcd\x21\x3a\x9d\xa4\x0b\xcc\x3f\xd4\x11\x7f\xb0\x67\x00\x00\x00\xff\xff\xce\xa7\xfe\x77\x3a\x01\x00\x00")

func toscaCapabilitiesOperatingsystemBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesOperatingsystem,
		"tosca.capabilities.OperatingSystem",
	)
}

func toscaCapabilitiesOperatingsystem() (*asset, error) {
	bytes, err := toscaCapabilitiesOperatingsystemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.OperatingSystem", size: 314, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcc\xb1\x0d\x02\x31\x0c\x85\xe1\xfe\xa6\x78\x13\xdc\x00\xd7\xa1\x0c\x80\x04\x59\xc0\x09\x46\xb1\x14\x70\x64\x5b\x48\xd9\x9e\x14\xd0\x5c\xfd\xbe\xf7\x87\x7a\xa5\xbd\xd2\xa0\x22\x5d\x42\xd8\xf7\x9b\x6a\x1c\x1b\xf0\x60\xaf\x26\x23\x44\xdf\x07\x72\x63\xe4\xeb\x3d\x5d\x60\x6b\x46\xfa\x1f\x26\xf2\x1c\x0c\xea\x1d\x1a\x8d\xed\x87\x0a\x39\x9f\x91\xaf\xa2\xc9\x87\xf1\x34\x7d\x6d\xdf\x00\x00\x00\xff\xff\x74\xb4\xdd\x64\x79\x00\x00\x00")

func toscaCapabilitiesRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesRoot,
		"tosca.capabilities.Root",
	)
}

func toscaCapabilitiesRoot() (*asset, error) {
	bytes, err := toscaCapabilitiesRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Root", size: 121, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaCapabilitiesScalable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcb\x41\x0a\xc2\x30\x10\x85\xe1\xbd\xa7\x78\x27\x28\xb8\xcd\x31\xf4\x00\x65\x9a\xbe\xca\x40\x9a\x09\x93\x51\xf4\xf6\x5a\xac\x3b\x41\x70\xf9\x7e\xde\x17\xd6\xb3\x0c\x59\x9a\x4c\x5a\x34\x94\x7d\x38\x67\x29\x32\x15\xa6\x03\x30\xd3\xf5\xc6\x79\x5c\xdc\xd6\x84\x2f\xe7\x93\x59\xbc\x7e\xcd\xad\xd1\xb7\xb2\x29\x60\xd5\x3a\x6a\xed\x21\x35\x7f\x12\x10\x8f\xc6\x04\xad\xc1\x0b\x7d\x6f\x33\x17\xb9\x96\x48\x38\xbe\x9d\xdc\xff\x72\xfb\xfc\x65\x9f\x01\x00\x00\xff\xff\x68\x7c\xf2\x28\xee\x00\x00\x00")

func toscaCapabilitiesScalableBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesScalable,
		"tosca.capabilities.Scalable",
	)
}

func toscaCapabilitiesScalable() (*asset, error) {
	bytes, err := toscaCapabilitiesScalableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Scalable", size: 238, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaInterfacesNodeLifecycleStandard = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcf\xb1\x0d\x02\x31\x0c\x85\xe1\x9e\x29\x3c\x41\x06\xb8\x35\x98\xc0\x72\xde\x21\x4b\x91\x1d\x39\xa6\x60\x7b\x14\xe0\x10\x47\x95\xce\xc5\xff\x3d\xc9\xe9\x43\xb8\xa8\x25\x62\x67\xc1\x28\xe6\x15\xa5\xe9\x0e\x79\x48\x43\xb9\x26\x5b\xe5\xa8\xdb\x85\x48\x02\x9c\x98\x17\x51\xc5\x90\xd0\x9e\xea\xb6\xd1\x11\xd1\xd7\x7d\x5a\xf2\x8e\xe0\x19\x95\xe9\xdd\x76\xbd\xdd\x63\x75\xe2\xc8\xcf\x2b\x23\x39\x72\x6d\xe1\x95\xfe\x6b\xef\xab\xd8\xfb\xd9\x56\x34\xac\xfe\xff\x6e\x7f\xfd\x33\x00\x00\xff\xff\xc3\xea\xa2\x4a\x6a\x01\x00\x00")

func toscaInterfacesNodeLifecycleStandardBytes() ([]byte, error) {
	return bindataRead(
		_toscaInterfacesNodeLifecycleStandard,
		"tosca.interfaces.node.lifecycle.Standard",
	)
}

func toscaInterfacesNodeLifecycleStandard() (*asset, error) {
	bytes, err := toscaInterfacesNodeLifecycleStandardBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.interfaces.node.lifecycle.Standard", size: 362, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaInterfacesRelationshipConfigure = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4d\x8e\x83\x30\x0c\x85\xf7\x3d\x85\x2f\x30\x1c\xa0\xdb\x39\xc0\x1c\x01\x99\xc4\x80\x25\x1a\x23\xc7\x50\xf5\xf6\x13\x7e\x3a\x4a\xd4\xa9\x94\x2e\x31\x79\xdf\xfb\x14\xc7\x24\x3a\x6c\x38\x18\x69\x8f\x8e\x62\xa3\x34\xa1\xb1\x84\x38\xf2\xdc\x7c\x4b\xe8\x79\x58\x94\xae\x17\x80\x59\xa9\x75\xcf\x41\x1b\x65\x51\xb7\xcf\x01\x3c\x45\xa7\x3c\x6f\xb1\x2b\xfc\xcc\xa4\x3b\x01\x4c\xb6\xcc\xd7\x5f\x06\x6c\x24\x38\x72\x40\xc1\xcf\x92\x6a\x9b\x17\xb0\xa1\x0e\x64\x9f\x83\x8f\x5c\x09\x96\x68\x9f\x2b\xa7\x50\x85\x73\x89\xae\x94\x7e\x45\xff\x63\x8d\xde\x57\xf2\x82\x18\xf7\x8f\x5c\x31\x88\x27\x90\x1e\xf0\x09\xde\x07\x1d\x71\x18\x36\x2e\x79\x58\x19\xd3\xdf\x62\xcb\x67\x67\xdd\xf5\x64\x9d\x79\xc5\xde\x99\x4b\xdc\x47\x76\x23\x70\x4c\x5f\x77\xc0\x15\x79\xc2\x6e\xa2\x37\xf5\x65\x61\x1a\x1c\xe8\xd6\x8d\x18\x06\xf2\x95\x4e\x67\x7d\x94\x1b\xa5\xf7\x21\xe9\x84\x3d\x40\x14\xd0\x4c\xb9\x5b\x6c\xb7\xcc\xc4\x4f\x7a\x82\x2b\xdd\x64\xad\xdd\xe2\x71\xb8\xbc\xe2\x06\x2e\xbf\x01\x00\x00\xff\xff\x00\x76\x00\xa4\x4a\x03\x00\x00")

func toscaInterfacesRelationshipConfigureBytes() ([]byte, error) {
	return bindataRead(
		_toscaInterfacesRelationshipConfigure,
		"tosca.interfaces.relationship.Configure",
	)
}

func toscaInterfacesRelationshipConfigure() (*asset, error) {
	bytes, err := toscaInterfacesRelationshipConfigureBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.interfaces.relationship.Configure", size: 842, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesBlockstorage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xd0\xb1\x4e\xc4\x30\x0c\x06\xe0\xfd\x9e\xc2\x2f\x70\x91\x58\xb3\x71\x3b\x0b\x3c\x40\x64\x12\x5f\xcf\x22\x8d\x83\xed\x56\x82\xa7\xa7\xa5\x05\x0a\x1b\x5b\x14\x7f\xff\x1f\xc5\x2e\x96\x31\x34\x29\x64\xe1\x52\x25\xbf\x3c\xb9\x28\x0e\x14\x4f\x00\x85\x94\x67\x2a\xe9\xaa\x32\x46\x38\xca\x47\x11\x5f\x40\x57\xe9\xa4\xce\x64\x2b\x07\x30\x7e\xa7\xed\x04\xe0\x6f\x9d\x22\x2c\x91\x8a\x7a\x9e\x1a\x7b\x58\xa7\xfb\x30\x4b\x33\x57\xe4\xe6\xf6\xe5\x01\xce\x30\x28\xa1\x93\x26\xd1\x44\xaf\x13\xd6\x08\x77\xf0\x70\xf9\x04\xb3\xd4\x69\xa4\xc4\xe5\x4f\xbf\x2b\xb7\x61\xbf\xd2\x25\xc4\x4a\x25\xc2\x15\xab\x6d\x6f\x59\xc3\x6e\x37\xf1\xff\x26\x33\x76\x7c\xe6\xca\x3f\x9f\x43\x77\xcc\xb7\x91\x9a\xff\x2e\xda\xf6\x72\xf4\xe1\xfe\x9b\x9e\x3e\x02\x00\x00\xff\xff\xf7\xa4\x4f\xb1\x60\x01\x00\x00")

func toscaNodesBlockstorageBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesBlockstorage,
		"tosca.nodes.BlockStorage",
	)
}

func toscaNodesBlockstorage() (*asset, error) {
	bytes, err := toscaNodesBlockstorageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.BlockStorage", size: 352, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesCompute = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xc1\x8e\x9b\x30\x10\x86\xef\x79\x0a\x3f\x40\x8b\x7a\xce\x6d\xb3\xbb\x87\x5e\xb2\x55\x69\x4e\x55\x84\x06\x7b\x12\xac\x18\x8f\x3b\x1e\x12\xf1\xf6\x35\x60\x28\xa9\x2a\x71\xe9\x09\x61\x7d\xff\x37\x9e\x19\x0b\x45\x0d\x85\x27\x83\xb1\x78\xa5\x36\x74\x82\xfb\x9d\x52\x06\xd9\xde\xd1\x54\x17\xa6\x76\xaf\xd6\xd0\x77\x22\x49\x00\x88\xb0\xad\x13\x1d\x07\x5c\xa9\x90\x78\x10\xac\xc0\x18\xc6\x98\x0f\x95\x92\x3e\xe0\x5e\xc5\xc4\xfa\xeb\xc4\x75\xb5\xb3\x7a\x13\xf3\x28\x0f\xe2\xdb\x5f\x40\x0b\x21\xff\xa3\x17\xee\xab\xa8\x1b\x6c\x61\x66\x66\x6a\xba\xad\x01\x81\xe1\x3f\x16\xd9\x55\x1c\xa7\xef\x57\x7f\xa1\xe9\x2a\xc4\xf2\x5f\x0b\x7c\x4b\xc2\x6c\x67\xfc\xd5\x59\xc6\x36\x69\x72\x89\xcf\xca\x91\x06\x57\x45\x21\x86\x2b\xfe\x71\x6a\x08\x50\x5b\x67\xa5\x9f\xcd\xcb\x89\x4d\xf2\x17\x11\xd0\xcd\x20\x5a\x12\xc3\x22\x9e\x97\x72\x48\xee\x5b\x39\x99\x17\x8c\xd1\x81\x58\xf2\xb1\xb1\x61\xc6\xd7\x67\xb3\x1b\xe3\x0f\x5a\x42\xa4\x75\xc7\x8c\x5e\xa7\xc5\xaa\x9f\x5f\x3e\xa9\xd3\xf1\xf0\x71\x3a\xbe\xbd\xbf\x9d\xd5\x6e\x75\x59\x3b\x2f\xbe\xa1\x28\xcf\x43\xfc\x47\x13\xaf\xe4\x05\xac\x47\xce\xe0\x1d\x9c\x35\x55\xa4\x8e\x35\x56\xe3\x10\x53\xb1\x75\x43\x25\x5d\xe4\x01\x8c\xc3\x93\x24\x9f\x9a\x3f\xef\xa6\xad\x98\x40\xd6\x6f\x17\x7c\xcf\x60\xf1\x62\x5a\xeb\x47\x9a\xe2\x66\xea\x23\x20\xa7\xf1\xf8\x6b\xd9\x47\xc1\x76\xc4\x13\xe4\xa0\x76\xb8\x19\x2e\x33\x38\x72\xb5\xf5\x26\x79\x36\x43\xf3\xd3\x39\x24\x7e\x0c\xff\x0e\x00\x00\xff\xff\x77\xc5\xfd\xae\x90\x03\x00\x00")

func toscaNodesComputeBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesCompute,
		"tosca.nodes.Compute",
	)
}

func toscaNodesCompute() (*asset, error) {
	bytes, err := toscaNodesComputeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Compute", size: 912, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesContainerApplication = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8e\x41\x0a\x02\x31\x0c\x45\xf7\x73\x8a\x5c\xc0\x1e\x60\x76\xe2\xc6\x9d\xe0\x05\xa4\xb6\x91\x09\x74\x92\x9a\x44\xc1\xdb\x3b\x55\x66\xa8\x98\x55\xf8\xfc\xf7\xff\x77\xb1\x14\x03\x4b\x46\x0b\x07\x61\x8f\xc4\xa8\x61\x5f\x6b\xa1\x14\x9d\x84\xc7\x01\x20\xa3\xd2\x13\xf3\xe5\xa6\x32\x8f\xd0\x23\x67\x11\x5f\x0c\x8a\xf7\x07\x29\xce\xc8\x6e\x0d\x00\xd8\xc1\x24\xe6\xdf\xbf\x5d\x8a\x35\x5e\xa9\x90\xbf\xd6\x80\x4d\xa1\xbe\x7a\x03\x5a\xfe\x6f\xd7\xbf\x47\xb1\x7c\x36\xda\x44\x75\xf5\xf6\x9a\x85\xe3\x32\x02\xf3\x89\x87\x77\x00\x00\x00\xff\xff\x32\xf2\xb2\xce\xe8\x00\x00\x00")

func toscaNodesContainerApplicationBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesContainerApplication,
		"tosca.nodes.Container.Application",
	)
}

func toscaNodesContainerApplication() (*asset, error) {
	bytes, err := toscaNodesContainerApplicationBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Container.Application", size: 232, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesContainerRuntime = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcd\xcd\x0d\xc2\x30\x0c\x86\xe1\x7b\xa7\xf0\x04\x19\xa0\xd7\x6e\x40\x07\x40\x6e\xf3\x55\x58\x4a\xec\x28\x31\x20\xb6\xa7\xfc\x89\xdc\x7a\xb3\xe4\xe7\xb5\xdd\xda\xca\x41\x2d\xa2\x85\xc9\xd4\x59\x14\x35\x9c\xae\xea\x92\x31\x0e\x44\x11\x55\x6e\x88\xe7\xad\x5a\x1e\xa9\xe7\xb3\x6d\x7e\xe7\x8a\xc9\x72\x31\x85\xfa\xae\x57\x2e\xbc\x48\x12\x17\xb4\x57\x4d\x74\xb1\xe6\x9f\x89\xc8\x1f\x05\xbf\x1b\xbd\xfc\x7f\x7e\xc3\x7d\x9d\x78\x49\x38\xcc\xe6\x2f\x1c\x9e\x01\x00\x00\xff\xff\xf3\x08\xa0\x97\xc6\x00\x00\x00")

func toscaNodesContainerRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesContainerRuntime,
		"tosca.nodes.Container.Runtime",
	)
}

func toscaNodesContainerRuntime() (*asset, error) {
	bytes, err := toscaNodesContainerRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Container.Runtime", size: 198, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesDbms = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\x31\x6e\xc3\x30\x0c\x45\xf7\x9c\x82\x27\xf0\x01\x3c\x36\x59\x3b\x65\x2c\x0a\x83\xb1\xe8\x84\x80\x42\xaa\x24\x63\xa3\xb7\xaf\x2c\xa7\x45\xd2\x4e\xdd\x0c\x9a\x7c\xef\xe3\x2b\xd4\x47\xec\x44\x13\x79\x77\x78\x79\x3d\xf6\x3b\x80\x44\xc6\x33\xa5\x61\x32\xbd\xf6\xf0\xb8\x71\xd4\x29\x16\x34\xda\xeb\xb5\xa8\x90\x44\xdd\x2e\xa6\x85\x2c\x98\x7c\xbd\x05\x30\xd5\x18\x0a\xba\x2f\x6a\x69\x1b\x01\xc4\x67\xa1\x1e\x3c\x8c\xe5\x7c\x1f\x19\x7d\xdc\xd8\x28\xf5\x30\x61\x76\xba\x4f\xab\x65\x34\x2e\xc1\x2a\x55\x7d\x21\xd0\xf6\x8d\xb9\x71\xe1\x9b\x0b\x93\x5a\xfb\xbd\x66\x06\x27\x9b\x79\xdc\x10\x45\x2d\x9e\xad\x2c\x41\x67\xb2\xff\x69\x57\xcc\x1f\x01\x2c\x9c\x33\x64\xf6\x20\xa9\xbd\xb4\x10\x09\x03\x01\x25\x35\x30\x79\x78\x25\x8e\x58\xf0\xc4\x99\x5b\x29\x95\xde\x24\x17\xf5\x5f\xc1\xb6\x66\x1f\x97\xbb\xbd\x4a\x20\xcb\x4f\xda\x19\x33\xa7\xc1\xf5\x66\x23\x0d\xeb\x55\xe5\xbd\x3d\x3d\xc9\xa1\xfa\x4f\xe8\x04\xef\xbb\xaf\x00\x00\x00\xff\xff\xf8\x4d\x4a\x93\xcc\x01\x00\x00")

func toscaNodesDbmsBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesDbms,
		"tosca.nodes.DBMS",
	)
}

func toscaNodesDbms() (*asset, error) {
	bytes, err := toscaNodesDbmsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.DBMS", size: 460, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesDatabase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4b\x6e\xe3\x30\x0c\xdd\xe7\x14\xbc\xc0\xf8\x00\x5e\x66\x32\xc0\x6c\x06\x03\xb4\x07\x08\x18\x8b\x4e\x08\xc8\xa2\x4a\xd1\x09\x72\xfb\xd2\x8a\x6d\x38\x40\xb3\x68\x77\x02\xf5\x3e\xfc\x3c\x93\xd2\x61\x93\x24\x50\x69\x0e\x68\x78\xc2\x42\xed\x0e\x20\x90\xf2\x95\xc2\xb1\x57\x19\x5a\xd8\xa2\xde\x44\xcc\x01\x59\x25\x93\x1a\x53\x99\xe0\x00\x09\x07\x7a\xbc\x00\xec\x9e\xa9\x85\x62\xca\xe9\x3c\x97\x9c\xd9\x29\x67\x63\x49\x2e\x77\x21\x88\x72\xe6\x0e\x63\xe5\x81\xf4\xb5\x16\xe6\x06\x2a\x27\x8b\xda\xb3\x20\x27\xa3\x33\xe9\x2b\xc5\x89\x50\x1f\x63\xf2\xee\xe3\xdd\xcd\x57\x45\x28\xa4\x57\xee\x08\x6e\x1c\x23\x44\x2e\x46\xc9\xa7\x82\x5e\xb4\x62\xaa\xe6\xe8\xa0\xef\x8c\x20\xf5\xed\x33\x4c\x44\xc0\xae\x93\x31\xd9\x63\xa0\x49\xf7\xb0\x07\x0c\x03\x27\x37\x53\x9c\x90\xb3\x8e\xd2\xc7\xc8\x4a\xa1\x85\x1e\xe3\x32\x2c\x96\x72\x13\x0d\x3f\xb2\x5f\xc8\xd5\x75\xfa\x71\xe7\x6d\x4b\x2f\x7d\xe7\xca\x40\xc9\xe6\x2b\xfe\x82\x8b\x94\x75\xed\x00\x1d\x66\x3c\x71\x64\xbb\x2f\x21\x58\x2b\x7e\xf9\xe6\xb7\x24\x43\x4e\xeb\x4d\x3c\x06\x9e\x91\xe7\xbc\x1c\xf6\xff\xde\xd7\x6f\xa5\x58\x57\x51\x2e\x9c\x17\xd8\xb6\x56\x9a\xbf\xee\x4f\xe1\xff\xb4\xac\xad\xd5\xa3\xa5\xe5\x9c\x47\x4a\x21\x8b\xe7\xe1\x79\x5f\x5f\x74\xf8\x67\x06\xae\xe1\xde\x7d\x06\x00\x00\xff\xff\x07\x78\x7f\xa8\xf2\x02\x00\x00")

func toscaNodesDatabaseBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesDatabase,
		"tosca.nodes.Database",
	)
}

func toscaNodesDatabase() (*asset, error) {
	bytes, err := toscaNodesDatabaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Database", size: 754, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesLoadbalancer = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x4e\xeb\x40\x0c\x86\xf7\x3d\x85\xa5\xb7\x79\x4f\x7a\x44\xac\xb3\x2c\x2d\x12\x12\x2a\x15\x6a\x57\x08\xa1\xe9\x8c\xdb\x5a\x4c\xc6\x83\xc7\x01\xba\xe3\x1a\x5c\x8f\x93\x30\x49\x86\x12\x58\x20\x76\x91\xfd\xdb\xff\xff\x39\xa3\x9c\xac\xa9\x02\x3b\x4c\xd5\x25\x1b\x37\x35\xde\x04\x8b\x52\x4f\x00\x1c\x0a\x3d\xa2\xbb\xdb\x0a\x37\x35\x8c\x95\xd7\xcc\x9a\x05\x51\x38\xa2\x28\x61\xea\xe4\x00\x7f\x60\x35\x9d\xf5\x5f\xc6\xef\x58\x48\xf7\xcd\xd0\x00\xd0\x43\xc4\x1a\x92\x0a\x85\x5d\x29\x09\x3e\xb4\x24\xe8\x6a\xd8\x1a\x9f\xb0\x54\x93\x1a\x6d\x53\x0d\xf8\x9c\x57\x53\x83\x41\x8d\xcf\x2d\x6b\xa2\xd9\x90\xa7\x4f\x33\xeb\x29\x37\xbf\xee\x1f\x32\x8e\xb5\xd5\x3c\xb8\xc8\x14\xb4\x5a\xb6\x1b\x4f\xb6\xc8\xd9\xda\x56\x04\x33\x69\xb6\xba\x39\xfd\x0f\xeb\xc5\xf4\x6a\xbd\x98\xcd\x67\xb7\x50\x24\x99\xd3\x0a\x45\x25\x0e\x79\xf1\x1e\xe1\xdc\xb3\xd1\x1c\x1f\xfe\x5e\x2c\xff\x15\xfb\xb7\x97\xd7\x04\x1c\xfa\x7e\xec\x0d\x20\xa0\x3e\xb1\xdc\xe7\xc4\x01\x2c\x87\x80\x56\x73\xae\xc9\x91\xb7\x43\x2a\x08\x27\x60\x62\xcc\x33\xa6\x37\x29\xbe\x23\xd6\xc3\x8f\x44\x47\xbd\xa0\xef\x37\xa4\x3d\xc5\x8f\x89\x71\xad\xfb\x5f\xad\x62\x5a\xf1\x71\xe4\x17\xfc\xdf\x2e\x70\x36\xa0\x50\x07\xcb\x19\x19\x81\x05\x1a\x16\x84\x7c\x16\x07\x9b\xe1\xdd\xb8\x31\x51\x9a\xbc\x07\x00\x00\xff\xff\xd9\xff\xac\xaf\x5e\x02\x00\x00")

func toscaNodesLoadbalancerBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesLoadbalancer,
		"tosca.nodes.LoadBalancer",
	)
}

func toscaNodesLoadbalancer() (*asset, error) {
	bytes, err := toscaNodesLoadbalancerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.LoadBalancer", size: 606, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesObjectstorage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x90\x41\x4e\xc3\x30\x10\x45\xf7\x39\xc5\x5c\x20\x16\x6b\x2f\x91\x10\x4b\x24\x38\x80\x35\xb1\x87\x68\x50\xe2\x31\xe3\x09\x02\x4e\xdf\xa4\x4e\xab\xa8\x5d\x77\x67\xf9\xbf\xe7\x2f\x7f\x93\x1a\xd1\x65\x49\x54\xdd\xdb\xf0\x45\xd1\x3e\x4c\x14\x47\xf2\x5d\x07\x90\x48\xf9\x87\x52\xf8\x54\x99\x3d\x1c\xd9\x77\x11\xdb\x88\xa2\x52\x48\x8d\xa9\x9e\x05\x80\x8c\x33\xed\x47\x00\xfb\x2b\xe4\xa1\x9a\x72\x1e\xdb\x5d\xe5\xff\xbb\x38\xe2\x84\xda\x2f\x99\xcd\x6d\xf1\x25\x8d\x92\x57\x13\x39\x5b\xbd\x1a\x00\x3d\x8c\x4a\x68\xa4\x41\x34\xd0\xf7\x82\x93\x87\x27\x78\x7d\x6e\xc4\x8c\xbf\x0f\x6d\x88\x58\x70\xe0\x89\x0f\x1f\xae\x6d\xaf\x40\x39\x15\x59\x9f\xba\xe9\x6e\xa3\x1d\x3d\xf7\xb2\x93\xdd\x29\x00\x00\xff\xff\xf2\x45\xe0\x5d\x7d\x01\x00\x00")

func toscaNodesObjectstorageBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesObjectstorage,
		"tosca.nodes.ObjectStorage",
	)
}

func toscaNodesObjectstorage() (*asset, error) {
	bytes, err := toscaNodesObjectstorageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.ObjectStorage", size: 381, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x41\x4e\xf3\x40\x0c\x85\xf7\x3d\x85\x0f\xf0\xff\x23\xd6\xdd\x01\x65\xdb\x4a\xb4\x5d\x21\x84\xdc\x89\x43\x2d\x4d\x66\x82\xc7\x41\xca\xed\x71\x92\x4e\x13\x01\x65\x56\x71\xfc\xf9\xd9\xef\x69\xca\x1e\x5d\x4c\x15\x65\xf7\x9c\x92\xae\x57\x00\xf6\xed\x85\x5b\xe5\x14\xd7\x70\x38\x13\x1c\x76\xfb\xc7\x7b\xd8\x1a\x04\x87\xbe\x25\xc0\x10\x20\xe9\x99\xe4\xd2\x39\x61\xa6\xb9\x9d\x4d\x40\xf8\x93\xa0\x96\xd4\x98\x1c\xaa\x0a\x9f\x3a\xa5\x3c\x88\x03\x8c\x2b\xdf\xb8\x9a\x2a\xab\x6d\x66\x0d\xd9\xa0\xf8\xbe\x00\x22\x36\x74\x13\xc9\x8a\x7a\xab\xeb\xb1\xc5\x13\x07\x56\x2e\x1b\x6b\x42\xed\xe4\x1b\x3f\x39\x5f\xc2\x6e\xb0\x60\x8c\xd0\x47\xc7\x42\x0d\x45\xbd\x08\xfc\x37\x4b\x2d\xc5\x8a\xa2\xef\x8b\xca\x62\x51\xff\x97\xda\xf4\x86\x84\x0b\x35\xa7\x7d\x6d\x5f\x9f\x50\xc0\x21\xf8\x7c\xe6\xb6\xf0\xcb\x7f\xd9\x6d\xc6\x4b\xf2\x2e\xfe\x1c\x4e\xde\x77\x22\x76\xa4\x19\x87\x17\xb8\xfb\x07\xc7\xed\xc3\xee\xb8\xdd\x3c\x6d\xe0\xd5\x70\x8e\x4a\x52\xa3\x2f\xb9\xec\x15\x63\x85\x52\xfd\x16\xcc\xcc\x8e\xf7\xba\xc0\x35\xf9\xde\x07\x72\x65\x6a\xf5\x15\x00\x00\xff\xff\x96\x43\xb6\xdc\x3c\x02\x00\x00")

func toscaNodesRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesRoot,
		"tosca.nodes.Root",
	)
}

func toscaNodesRoot() (*asset, error) {
	bytes, err := toscaNodesRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Root", size: 572, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesSoftwarecomponent = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x31\x6e\xc3\x30\x0c\x45\xf7\x9c\x82\x40\xe7\xf8\x00\x5e\xb3\x74\x2b\xd0\x1e\xc0\x60\x25\x1a\x21\x60\x89\x2a\xc9\xa4\xc8\xed\x2b\x25\xb6\x60\x0f\x1d\xf5\xf0\xf8\x45\x7e\x17\x0b\x38\x64\x89\x64\xc3\x97\xcc\xfe\x8b\x4a\x17\x49\x45\x32\x65\x1f\x4f\x00\x91\x94\xef\x14\xa7\x59\x25\x8d\xb0\xd7\x3f\x45\xbc\x0a\x45\xa5\x90\x3a\x93\x35\x1d\xe0\x0d\xa2\x24\xe4\x7c\xb6\x42\x81\x67\x0e\x60\x6b\x2e\x84\x2d\x18\xee\xa4\xc6\x92\x9f\x03\x9d\x4e\x2b\x7d\xe5\x00\xf8\xa3\xd0\x78\x50\x01\x94\x7e\x6e\xac\x14\x47\x98\x71\x31\x7a\x52\x8c\x89\xf3\x14\x2a\xad\x21\x8c\xcb\x71\xfe\xb5\x72\x44\xc7\xf6\xb6\xe1\xd2\xbd\x7f\x23\x57\x92\xaa\xb6\x1e\x75\x86\xab\x98\x6f\xc1\x75\x67\x2c\xf8\xcd\x0b\xfb\x63\xfb\xa0\x13\x6e\x7f\x48\xf6\x5a\x01\x69\x1f\x68\x95\x1d\xeb\x6b\x2d\xdf\x9c\xba\xa1\xb4\xa0\xd7\x43\xed\xca\x65\x33\xf7\xcc\x86\xf7\xba\x02\xc5\x8f\x7c\xfa\x0b\x00\x00\xff\xff\x80\x99\x40\x57\xb5\x01\x00\x00")

func toscaNodesSoftwarecomponentBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesSoftwarecomponent,
		"tosca.nodes.SoftwareComponent",
	)
}

func toscaNodesSoftwarecomponent() (*asset, error) {
	bytes, err := toscaNodesSoftwarecomponentBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.SoftwareComponent", size: 437, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesWebapplication = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x4e\x43\x31\x0c\x44\xf7\x3d\x85\x2f\x40\x0e\xf0\x77\x08\x21\xb1\x43\x82\x05\xcb\xaf\x34\x19\xa8\xa5\x5f\xdb\x38\xa6\xa2\xb7\x27\xa5\xe5\x13\x50\xb7\xe3\x37\x63\x7b\x42\x5b\xc9\x49\xb4\xa2\xa5\x17\x6c\x6f\xcd\x16\x2e\x39\x58\x65\xda\x10\x55\x38\x1f\x50\xe7\x57\xd7\xfd\x44\x23\xfb\xa4\x1a\x1d\x30\x57\x83\x07\xa3\x9d\x70\xa2\xa2\x12\xf8\x8c\xd9\xfb\xf8\xac\x10\xc5\xd1\x30\x51\x0b\x67\x79\xeb\x52\xc9\x96\xb7\xbc\xf0\xaf\x29\x9b\xcd\x90\x6a\xca\xf2\xcf\x74\xde\x38\x3a\xd2\xfd\x05\xec\x9c\xe3\xfd\x83\x1d\x7b\x48\x5c\x92\x6e\x68\xa7\x6d\xcd\x18\x76\x1d\xaf\x66\xdd\xf5\x6b\x33\x0b\x7c\x35\x9c\x9e\xfb\xfb\x68\x2f\xe5\x19\x7e\x18\x18\xc7\xf2\x5d\x50\xdb\xb1\xfd\xb0\xa3\xd6\xd2\x43\x3f\x02\xf5\x51\x36\x5f\x01\x00\x00\xff\xff\x8c\x92\x03\x78\x5e\x01\x00\x00")

func toscaNodesWebapplicationBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesWebapplication,
		"tosca.nodes.WebApplication",
	)
}

func toscaNodesWebapplication() (*asset, error) {
	bytes, err := toscaNodesWebapplicationBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.WebApplication", size: 350, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaNodesWebserver = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xd0\xb1\x6a\xc4\x30\x0c\x80\xe1\xfd\x9e\x42\xd0\xb5\x78\xea\x94\xed\x38\xba\x17\x6e\xe8\x50\x8a\x51\x6c\x85\x0a\x1c\xc9\xc8\x6a\x4a\xde\xbe\x49\x9a\x40\x28\x1d\xba\xda\xdf\x2f\x1b\xb9\xb6\x84\x41\x34\x53\x0b\xaf\xd4\xdf\xc9\x26\xb2\xee\x02\x90\xc9\x78\xa2\x1c\x07\xd3\xb1\x83\x33\xbb\xeb\xe0\x5f\x68\x74\xd3\xb1\xaa\x90\xf8\xa2\x13\x56\xec\xb9\xb0\x33\xb5\xb5\x06\x78\x80\x97\x65\x00\x3a\x3d\x42\xc1\x99\x0c\x9e\x80\x24\x57\x65\xf1\xb6\x81\x8c\x8e\xf1\x38\x3a\x5e\x38\xcf\x09\xcf\xfb\xe5\xc6\x31\x8f\x2c\xff\xf3\xe1\xba\xda\xad\xfa\xd0\xe6\x3f\xff\x01\xf0\xb9\xd2\x9f\xdd\x4d\xc5\x91\x85\x6c\x87\x13\x16\xce\xb1\xe9\xa7\x25\x8a\x6b\xd5\x3a\x78\x83\x5f\x9b\xba\xd6\x5a\x38\xa1\xb3\x0a\xbc\x5f\xbe\x03\x00\x00\xff\xff\x5a\x8e\x4d\x0f\x47\x01\x00\x00")

func toscaNodesWebserverBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesWebserver,
		"tosca.nodes.WebServer",
	)
}

func toscaNodesWebserver() (*asset, error) {
	bytes, err := toscaNodesWebserverBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.WebServer", size: 327, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsAttachesto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x8d\x41\x8e\x83\x30\x0c\x45\xf7\x9c\xc2\x17\x18\xa4\xd9\x66\x37\x57\x18\xcd\x6e\x54\x45\x6e\x62\xc0\x52\x88\x53\xdb\x45\xea\xed\x0b\x14\x76\x55\x97\xfe\x7e\xff\x7d\x17\x4b\xd8\x2b\x15\x74\x96\x6a\x13\x37\xeb\x7f\xdc\x31\x4d\x64\x7f\x12\x3a\x80\x4c\xca\x0b\xe5\x38\xa8\xcc\x01\xde\xf1\xbf\x22\xbe\x82\x0b\x16\xce\xd1\x51\x47\xf2\xe8\x8f\x46\x16\xe0\xff\x28\x24\x6c\x78\xe5\xc2\xce\x74\xfa\x67\xaa\x0e\x97\xb5\xd7\x54\x1a\xe9\xf6\xd9\xe6\x00\x8a\xa4\x5d\xfe\xba\x00\x36\x55\x00\x73\xe5\x3a\x1e\x51\x5a\xa7\x5d\x91\xab\xdb\x49\x01\x7c\xc1\xcc\x35\x16\xaa\xa3\x4f\x01\xbe\xf7\x3c\xd3\xc2\x89\x3e\x98\x94\x6e\x77\x56\xca\x01\x06\x2c\x46\xdd\x33\x00\x00\xff\xff\x92\xde\x38\x61\x10\x01\x00\x00")

func toscaRelationshipsAttachestoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsAttachesto,
		"tosca.relationships.AttachesTo",
	)
}

func toscaRelationshipsAttachesto() (*asset, error) {
	bytes, err := toscaRelationshipsAttachestoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.AttachesTo", size: 272, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsConnectsto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8d\x41\x0e\xc2\x30\x0c\x04\xef\x7d\x85\x5f\x90\x07\xe4\x5a\xf1\x01\xc4\x0d\xa1\xca\x24\x2e\x58\x0a\x71\xb0\x4d\x25\x7e\x4f\x03\x85\x13\xc7\x5d\xcd\xee\xb8\x58\xc2\xa0\x54\xd0\x59\xaa\x5d\xb9\x59\x18\xa5\x56\x4a\x6e\x07\x89\x03\x40\x26\xe5\x85\xf2\x34\xab\xdc\x22\xfc\xe3\xf7\x22\xbe\x82\x0b\x16\xce\x93\xa3\x5e\xc8\x27\x7f\x36\xb2\x08\xc7\x6d\x90\xb0\xe1\x99\x0b\x3b\x93\x85\x5d\xcd\x4d\xb8\x3a\x9c\xd6\x55\x53\x69\xa4\xbd\xef\x32\x80\xa4\x94\xa9\x3a\x63\xf9\x64\x80\x7e\xf5\x15\x67\x74\x7c\x5f\x87\xf1\xc7\x6d\x98\xd2\xfd\xc1\x6b\x19\x61\xc6\x62\x34\xbc\x02\x00\x00\xff\xff\xa5\xbf\x2d\xa5\xda\x00\x00\x00")

func toscaRelationshipsConnectstoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsConnectsto,
		"tosca.relationships.ConnectsTo",
	)
}

func toscaRelationshipsConnectsto() (*asset, error) {
	bytes, err := toscaRelationshipsConnectstoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.ConnectsTo", size: 218, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsDependson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcb\x31\x0a\x42\x31\x0c\x06\xe0\xfd\x9d\x22\x27\xe8\x01\x3a\x3b\x2b\xb8\x8a\x94\xf8\xf2\xab\x81\xda\x94\x24\x14\xbc\xbd\x0e\x8e\xee\xdf\x97\x16\x3b\x17\x47\xe7\x54\x1b\xf1\xd4\x19\xe5\x80\x89\x21\x71\x1a\x75\x23\x12\xb8\x2e\x48\xbb\xbb\xbd\x2a\xfd\xe3\x67\xb3\xfc\xc2\xc5\x5d\xa5\x25\xfb\x03\xd9\xf2\x3d\x11\x95\x2e\xbf\xb0\xf3\xe4\x9b\x76\x4d\x45\x94\xa3\x09\xe8\xba\x7d\x02\x00\x00\xff\xff\xd8\x19\xf9\xc4\x7a\x00\x00\x00")

func toscaRelationshipsDependsonBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsDependson,
		"tosca.relationships.DependsOn",
	)
}

func toscaRelationshipsDependson() (*asset, error) {
	bytes, err := toscaRelationshipsDependsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.DependsOn", size: 122, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsHostedon = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcb\x31\x0a\x42\x31\x0c\x06\xe0\xfd\x9d\x22\x27\xe8\x01\xba\xba\xb8\x09\xae\x22\x25\xbe\x46\x0d\xd4\xa4\x24\x3f\x05\x6f\xaf\x83\xa3\xfb\xf7\xc1\x73\xe7\x12\x32\x18\xea\x96\x4f\x9d\x59\x8e\x9e\x90\x7e\xb2\xba\x11\x75\x09\x5d\xd2\xdb\x3d\xfc\x55\xe9\x9f\x3e\xbb\xe3\x0b\x17\x0f\xed\x0d\x1c\x0f\x41\xc3\x7b\x4a\x56\xba\xfc\xc2\xce\x93\x6f\x3a\x14\x2a\x59\x0e\x6e\x60\x35\x09\xba\x6e\x9f\x00\x00\x00\xff\xff\xef\x37\x95\x44\x7e\x00\x00\x00")

func toscaRelationshipsHostedonBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsHostedon,
		"tosca.relationships.HostedOn",
	)
}

func toscaRelationshipsHostedon() (*asset, error) {
	bytes, err := toscaRelationshipsHostedonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.HostedOn", size: 126, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x5d\x0e\x82\x40\x0c\x84\xdf\x39\x45\x4f\xc0\x01\x78\x33\x1c\xc0\x04\x79\x37\x05\x0a\x34\x81\xed\xa6\x2d\x26\xde\xde\x45\xfc\x41\x8d\x8f\x93\xf9\x66\x66\xb7\x2e\xd6\x62\xae\x34\xa1\xb3\x04\x1b\x39\x5a\x5e\x89\x78\x91\x01\x74\x64\xad\x72\x5c\x8d\x02\xea\x91\xa0\x3e\x9e\xca\x03\x68\xb2\xa1\xda\x25\xa0\xbe\x46\x02\x9c\x26\x10\x1f\x49\x1f\x58\x83\x46\xbf\x98\xa5\x56\xe5\x0b\x41\xaf\x32\xa7\x0d\x74\x57\x6e\x16\x27\x5b\x17\x01\xee\xef\x39\x73\xb7\xa9\xa4\x53\xa6\x00\x4b\x50\x18\x76\x40\xc0\x99\xfe\x20\x1c\x9c\xb4\xc7\xf6\xd9\x58\x4a\xe8\x79\x58\xf4\x8b\xdf\x3e\xfe\x86\x3f\x6e\x90\xbf\x42\xd9\x2d\x00\x00\xff\xff\x67\x02\x04\xb3\x21\x01\x00\x00")

func toscaRelationshipsRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsRoot,
		"tosca.relationships.Root",
	)
}

func toscaRelationshipsRoot() (*asset, error) {
	bytes, err := toscaRelationshipsRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.Root", size: 289, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _toscaRelationshipsRoutesto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\xcb\x31\x0a\x42\x31\x0c\x06\xe0\xfd\x9d\x22\x27\xe8\x01\xba\x8a\x17\x10\x37\x91\x12\xdb\xa8\x81\x9a\x94\xe6\xf7\x81\xb7\xb7\x83\xa3\xfb\xf7\xc1\xa3\x72\x9a\xd2\x19\xea\x16\x4f\x1d\x91\x4e\xfe\x86\xc4\xd9\xf3\x46\xd4\x64\xea\x2e\xad\xdc\xa7\xbf\x32\xfd\xd3\x07\x37\x93\x8a\xe5\x17\xdf\xb9\x6b\x2b\xe0\xf9\x10\x14\x7c\x86\x44\xa6\xcb\xaf\x55\x1e\x7c\xd3\xae\x50\x89\x74\xb4\x36\x5c\x0d\x74\xdd\xbe\x01\x00\x00\xff\xff\x69\x90\xe5\x2c\x83\x00\x00\x00")

func toscaRelationshipsRoutestoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsRoutesto,
		"tosca.relationships.RoutesTo",
	)
}

func toscaRelationshipsRoutesto() (*asset, error) {
	bytes, err := toscaRelationshipsRoutestoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.RoutesTo", size: 131, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tosca.capabilities.Attachement":           toscaCapabilitiesAttachement,
	"tosca.capabilities.Container":             toscaCapabilitiesContainer,
	"tosca.capabilities.Endpoint":              toscaCapabilitiesEndpoint,
	"tosca.capabilities.Endpoint.Admin":        toscaCapabilitiesEndpointAdmin,
	"tosca.capabilities.Endpoint.Database":     toscaCapabilitiesEndpointDatabase,
	"tosca.capabilities.Endpoint.Public":       toscaCapabilitiesEndpointPublic,
	"tosca.capabilities.Network.Bindable":      toscaCapabilitiesNetworkBindable,
	"tosca.capabilities.Node":                  toscaCapabilitiesNode,
	"tosca.capabilities.OperatingSystem":       toscaCapabilitiesOperatingsystem,
	"tosca.capabilities.Root":                  toscaCapabilitiesRoot,
	"tosca.capabilities.Scalable":              toscaCapabilitiesScalable,
	"tosca.interfaces.node.lifecycle.Standard": toscaInterfacesNodeLifecycleStandard,
	"tosca.interfaces.relationship.Configure":  toscaInterfacesRelationshipConfigure,
	"tosca.nodes.BlockStorage":                 toscaNodesBlockstorage,
	"tosca.nodes.Compute":                      toscaNodesCompute,
	"tosca.nodes.Container.Application":        toscaNodesContainerApplication,
	"tosca.nodes.Container.Runtime":            toscaNodesContainerRuntime,
	"tosca.nodes.DBMS":                         toscaNodesDbms,
	"tosca.nodes.Database":                     toscaNodesDatabase,
	"tosca.nodes.LoadBalancer":                 toscaNodesLoadbalancer,
	"tosca.nodes.ObjectStorage":                toscaNodesObjectstorage,
	"tosca.nodes.Root":                         toscaNodesRoot,
	"tosca.nodes.SoftwareComponent":            toscaNodesSoftwarecomponent,
	"tosca.nodes.WebApplication":               toscaNodesWebapplication,
	"tosca.nodes.WebServer":                    toscaNodesWebserver,
	"tosca.relationships.AttachesTo":           toscaRelationshipsAttachesto,
	"tosca.relationships.ConnectsTo":           toscaRelationshipsConnectsto,
	"tosca.relationships.DependsOn":            toscaRelationshipsDependson,
	"tosca.relationships.HostedOn":             toscaRelationshipsHostedon,
	"tosca.relationships.Root":                 toscaRelationshipsRoot,
	"tosca.relationships.RoutesTo":             toscaRelationshipsRoutesto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tosca.capabilities.Attachement":           &bintree{toscaCapabilitiesAttachement, map[string]*bintree{}},
	"tosca.capabilities.Container":             &bintree{toscaCapabilitiesContainer, map[string]*bintree{}},
	"tosca.capabilities.Endpoint":              &bintree{toscaCapabilitiesEndpoint, map[string]*bintree{}},
	"tosca.capabilities.Endpoint.Admin":        &bintree{toscaCapabilitiesEndpointAdmin, map[string]*bintree{}},
	"tosca.capabilities.Endpoint.Database":     &bintree{toscaCapabilitiesEndpointDatabase, map[string]*bintree{}},
	"tosca.capabilities.Endpoint.Public":       &bintree{toscaCapabilitiesEndpointPublic, map[string]*bintree{}},
	"tosca.capabilities.Network.Bindable":      &bintree{toscaCapabilitiesNetworkBindable, map[string]*bintree{}},
	"tosca.capabilities.Node":                  &bintree{toscaCapabilitiesNode, map[string]*bintree{}},
	"tosca.capabilities.OperatingSystem":       &bintree{toscaCapabilitiesOperatingsystem, map[string]*bintree{}},
	"tosca.capabilities.Root":                  &bintree{toscaCapabilitiesRoot, map[string]*bintree{}},
	"tosca.capabilities.Scalable":              &bintree{toscaCapabilitiesScalable, map[string]*bintree{}},
	"tosca.interfaces.node.lifecycle.Standard": &bintree{toscaInterfacesNodeLifecycleStandard, map[string]*bintree{}},
	"tosca.interfaces.relationship.Configure":  &bintree{toscaInterfacesRelationshipConfigure, map[string]*bintree{}},
	"tosca.nodes.BlockStorage":                 &bintree{toscaNodesBlockstorage, map[string]*bintree{}},
	"tosca.nodes.Compute":                      &bintree{toscaNodesCompute, map[string]*bintree{}},
	"tosca.nodes.Container.Application":        &bintree{toscaNodesContainerApplication, map[string]*bintree{}},
	"tosca.nodes.Container.Runtime":            &bintree{toscaNodesContainerRuntime, map[string]*bintree{}},
	"tosca.nodes.DBMS":                         &bintree{toscaNodesDbms, map[string]*bintree{}},
	"tosca.nodes.Database":                     &bintree{toscaNodesDatabase, map[string]*bintree{}},
	"tosca.nodes.LoadBalancer":                 &bintree{toscaNodesLoadbalancer, map[string]*bintree{}},
	"tosca.nodes.ObjectStorage":                &bintree{toscaNodesObjectstorage, map[string]*bintree{}},
	"tosca.nodes.Root":                         &bintree{toscaNodesRoot, map[string]*bintree{}},
	"tosca.nodes.SoftwareComponent":            &bintree{toscaNodesSoftwarecomponent, map[string]*bintree{}},
	"tosca.nodes.WebApplication":               &bintree{toscaNodesWebapplication, map[string]*bintree{}},
	"tosca.nodes.WebServer":                    &bintree{toscaNodesWebserver, map[string]*bintree{}},
	"tosca.relationships.AttachesTo":           &bintree{toscaRelationshipsAttachesto, map[string]*bintree{}},
	"tosca.relationships.ConnectsTo":           &bintree{toscaRelationshipsConnectsto, map[string]*bintree{}},
	"tosca.relationships.DependsOn":            &bintree{toscaRelationshipsDependson, map[string]*bintree{}},
	"tosca.relationships.HostedOn":             &bintree{toscaRelationshipsHostedon, map[string]*bintree{}},
	"tosca.relationships.Root":                 &bintree{toscaRelationshipsRoot, map[string]*bintree{}},
	"tosca.relationships.RoutesTo":             &bintree{toscaRelationshipsRoutesto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, path.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
