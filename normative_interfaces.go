// Code generated by go-bindata.
// sources:
// NormativeTypes\interfaces\tosca.interfaces.node.lifecycle.Standard
// NormativeTypes\interfaces\tosca.interfaces.relationship.Configure
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _interfacesToscaInterfacesNodeLifecycleStandard = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\xcf\xb1\x0d\x02\x31\x0c\x85\xe1\x9e\x29\x3c\x41\x06\xb8\x35\x98\xc0\x72\xde\x21\x4b\x91\x1d\x39\xa6\x60\x7b\x14\xe0\x10\x47\x95\xce\xc5\xff\x3d\xc9\xe9\x43\xb8\xa8\x25\x62\x67\xc1\x28\xe6\x15\xa5\xe9\x0e\x79\x48\x43\xb9\x26\x5b\xe5\xa8\xdb\x85\x48\x02\x9c\x98\x17\x51\xc5\x90\xd0\x9e\xea\xb6\xd1\x11\xd1\xd7\x7d\x5a\xf2\x8e\xe0\x19\x95\xe9\xdd\x76\xbd\xdd\x63\x75\xe2\xc8\xcf\x2b\x23\x39\x72\x6d\xe1\x95\xfe\x6b\xef\xab\xd8\xfb\xd9\x56\x34\xac\xfe\xff\x6e\x7f\xfd\x33\x00\x00\xff\xff\xc3\xea\xa2\x4a\x6a\x01\x00\x00")

func interfacesToscaInterfacesNodeLifecycleStandardBytes() ([]byte, error) {
	return bindataRead(
		_interfacesToscaInterfacesNodeLifecycleStandard,
		"interfaces/tosca.interfaces.node.lifecycle.Standard",
	)
}

func interfacesToscaInterfacesNodeLifecycleStandard() (*asset, error) {
	bytes, err := interfacesToscaInterfacesNodeLifecycleStandardBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/tosca.interfaces.node.lifecycle.Standard", size: 362, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _interfacesToscaInterfacesRelationshipConfigure = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4d\x8e\x83\x30\x0c\x85\xf7\x3d\x85\x2f\x30\x1c\xa0\xdb\x39\xc0\x1c\x01\x99\xc4\x80\x25\x1a\x23\xc7\x50\xf5\xf6\x13\x7e\x3a\x4a\xd4\xa9\x94\x2e\x31\x79\xdf\xfb\x14\xc7\x24\x3a\x6c\x38\x18\x69\x8f\x8e\x62\xa3\x34\xa1\xb1\x84\x38\xf2\xdc\x7c\x4b\xe8\x79\x58\x94\xae\x17\x80\x59\xa9\x75\xcf\x41\x1b\x65\x51\xb7\xcf\x01\x3c\x45\xa7\x3c\x6f\xb1\x2b\xfc\xcc\xa4\x3b\x01\x4c\xb6\xcc\xd7\x5f\x06\x6c\x24\x38\x72\x40\xc1\xcf\x92\x6a\x9b\x17\xb0\xa1\x0e\x64\x9f\x83\x8f\x5c\x09\x96\x68\x9f\x2b\xa7\x50\x85\x73\x89\xae\x94\x7e\x45\xff\x63\x8d\xde\x57\xf2\x82\x18\xf7\x8f\x5c\x31\x88\x27\x90\x1e\xf0\x09\xde\x07\x1d\x71\x18\x36\x2e\x79\x58\x19\xd3\xdf\x62\xcb\x67\x67\xdd\xf5\x64\x9d\x79\xc5\xde\x99\x4b\xdc\x47\x76\x23\x70\x4c\x5f\x77\xc0\x15\x79\xc2\x6e\xa2\x37\xf5\x65\x61\x1a\x1c\xe8\xd6\x8d\x18\x06\xf2\x95\x4e\x67\x7d\x94\x1b\xa5\xf7\x21\xe9\x84\x3d\x40\x14\xd0\x4c\xb9\x5b\x6c\xb7\xcc\xc4\x4f\x7a\x82\x2b\xdd\x64\xad\xdd\xe2\x71\xb8\xbc\xe2\x06\x2e\xbf\x01\x00\x00\xff\xff\x00\x76\x00\xa4\x4a\x03\x00\x00")

func interfacesToscaInterfacesRelationshipConfigureBytes() ([]byte, error) {
	return bindataRead(
		_interfacesToscaInterfacesRelationshipConfigure,
		"interfaces/tosca.interfaces.relationship.Configure",
	)
}

func interfacesToscaInterfacesRelationshipConfigure() (*asset, error) {
	bytes, err := interfacesToscaInterfacesRelationshipConfigureBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interfaces/tosca.interfaces.relationship.Configure", size: 842, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"interfaces/tosca.interfaces.node.lifecycle.Standard": interfacesToscaInterfacesNodeLifecycleStandard,
	"interfaces/tosca.interfaces.relationship.Configure": interfacesToscaInterfacesRelationshipConfigure,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"interfaces": &bintree{nil, map[string]*bintree{
		"tosca.interfaces.node.lifecycle.Standard": &bintree{interfacesToscaInterfacesNodeLifecycleStandard, map[string]*bintree{
		}},
		"tosca.interfaces.relationship.Configure": &bintree{interfacesToscaInterfacesRelationshipConfigure, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

