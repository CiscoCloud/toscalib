// Code generated by go-bindata.
// sources:
// NormativeTypes\capabilities\tosca.capabilities.Attachement
// NormativeTypes\capabilities\tosca.capabilities.Container
// NormativeTypes\capabilities\tosca.capabilities.Endpoint
// NormativeTypes\capabilities\tosca.capabilities.Endpoint.Admin
// NormativeTypes\capabilities\tosca.capabilities.Endpoint.Database
// NormativeTypes\capabilities\tosca.capabilities.Endpoint.Public
// NormativeTypes\capabilities\tosca.capabilities.Network.Bindable
// NormativeTypes\capabilities\tosca.capabilities.Node
// NormativeTypes\capabilities\tosca.capabilities.OperatingSystem
// NormativeTypes\capabilities\tosca.capabilities.Root
// NormativeTypes\capabilities\tosca.capabilities.Scalable
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _capabilitiesToscaCapabilitiesAttachement = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\x73\x2c\x29\x49\x4c\xce\xc8\x4d\xcd\x2b\xb1\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\x3c\x28\x3f\xbf\x84\x0b\x10\x00\x00\xff\xff\xa0\x99\x08\x90\x47\x00\x00\x00")

func capabilitiesToscaCapabilitiesAttachementBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesAttachement,
		"capabilities/tosca.capabilities.Attachement",
	)
}

func capabilitiesToscaCapabilitiesAttachement() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesAttachementBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Attachement", size: 71, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesContainer = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x8e\x31\x4e\xc3\x40\x10\x45\x7b\x4e\x31\x17\x88\x45\xda\x2d\xa1\x80\x86\x86\x0b\xac\x86\xf5\x4f\x34\xc2\xde\x59\x66\x67\x91\x92\xd3\xb3\xb6\xac\x48\x48\xd0\x59\x29\xe7\xcf\xfb\x7a\xdf\xb5\x26\x1e\x12\x17\xfe\x90\x49\x5c\x50\x87\x67\xcd\xce\x92\x61\xe1\x81\x68\x84\xc9\x37\xc6\x78\x32\x9d\x03\xfd\x41\xbf\xab\x7a\xe7\x8a\x69\x81\x2d\xc9\xd2\x22\xca\x6d\x8e\xa9\xb4\xed\x22\xf2\x4b\x41\x20\xc9\x8e\x33\x6c\xcb\x0c\x5f\x4d\x0c\x63\xa0\x13\x4f\x15\x5b\x9a\x34\x57\xb7\x3e\xc0\x6f\x65\xa2\x03\x9d\x0d\xec\xb0\xa8\x16\x7b\x8d\xa7\x40\xc7\xf5\xdb\x25\x7d\x5c\x8f\x90\xd3\xe5\xb7\xad\x6f\x9d\xd8\x0e\x2d\x8b\x0f\x37\x64\x1f\xf7\xe3\x70\xa4\x97\xd7\xeb\xca\x8c\x52\x3f\x63\x95\x2b\xfe\xb7\x2f\xdf\x9d\xc4\xf4\xf6\xb4\x02\x33\xe6\xfb\x4a\x7f\x02\x00\x00\xff\xff\x5e\xc5\xf5\x65\x2a\x02\x00\x00")

func capabilitiesToscaCapabilitiesContainerBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesContainer,
		"capabilities/tosca.capabilities.Container",
	)
}

func capabilitiesToscaCapabilitiesContainer() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesContainerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Container", size: 554, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesEndpoint = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xb1\x4e\x03\x31\x0c\x86\x77\x9e\xc2\x0f\x50\x2a\xb1\xde\x86\x44\x07\xb6\xaa\x20\x16\x84\x22\x37\xf1\xb5\x11\xb9\x38\x38\x4e\x51\xdf\x9e\xb4\xbd\x72\x1c\x3a\x2a\x60\x89\x94\x5f\xff\x17\x3b\xbf\xad\x9c\x2d\xce\x2d\x26\x5c\xfb\xe0\xd5\x53\x9e\x2f\xa2\x4b\xec\xa3\x36\x57\x00\x8e\xc4\xef\xc8\x99\x56\xb8\x6b\x60\xc2\xbc\x62\xd6\xea\x4b\xc2\x89\xe4\xa0\x1c\xa8\xe3\x5d\xd9\x72\x38\xdd\x00\x74\x9f\xa8\x81\xac\xe2\xe3\xa6\x97\x1c\xb5\x58\x82\xd6\x57\x6d\x3a\x31\x2c\x3a\xf6\x2f\xab\x72\x47\x6d\xaf\x09\xbd\x15\x2f\xe4\x1a\x68\x31\x64\x3a\xaa\x99\x6c\x11\x1a\x53\x6b\xe6\x40\x18\xbf\x97\x19\xa0\x22\xc1\x24\xd4\xed\x85\xe6\xa6\x6a\x1d\xfa\x33\x11\x3b\xfa\x23\x17\x49\xdf\x59\x5e\xff\x83\x7e\x69\x7f\xb9\xba\x7f\xba\x7d\x5c\x1c\x65\x1f\x6b\xf8\xa8\x2c\xbf\x89\x37\x73\x11\x7b\x7e\xce\x72\xac\x2e\xac\xd3\xcd\x67\x16\xe0\x1a\x76\x18\xbc\x33\xf5\x2c\x75\x80\xf0\xdc\x33\x33\x50\x94\x0d\xe9\x0c\x12\x91\xc0\xcb\x67\x0a\x79\x5c\xb7\xc3\x74\xf1\x0f\x3f\x14\xed\x7c\x34\x81\xe2\xa6\x0e\x02\x6e\x7a\x9d\xa2\xca\xde\x64\xbb\xa5\x0e\x07\xef\xb0\x0d\x0f\x89\x6c\x95\x51\xeb\x57\xd7\x45\xcf\xeb\xe6\x93\x41\xe7\x84\x72\x9e\x4c\xe4\x23\x00\x00\xff\xff\x0d\xf3\x53\x37\xe5\x02\x00\x00")

func capabilitiesToscaCapabilitiesEndpointBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesEndpoint,
		"capabilities/tosca.capabilities.Endpoint",
	)
}

func capabilitiesToscaCapabilitiesEndpoint() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesEndpointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Endpoint", size: 741, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesEndpointAdmin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xce\x41\x0e\x02\x21\x0c\x85\xe1\xfd\x9c\xe2\x25\xee\xe7\x00\xec\x8c\xf1\x1c\xa6\x42\xd1\x26\x0c\x25\xa5\x78\x7e\xc1\xe8\xd6\x6d\xd3\xff\xcb\x73\xed\x91\xf6\x48\x8d\xee\x52\xc4\x85\xfb\x7e\xad\xa9\xa9\x54\xdf\xcf\xe9\x90\x1a\x36\x20\xb1\xc9\x8b\xd3\x2d\x9b\x1e\x01\x7f\x92\xf9\x7b\xc2\xe5\x49\xf5\xc1\xf8\xdd\xd0\x39\x0e\x63\x48\x4d\x12\xc9\xd5\x26\x00\xb7\xc1\x58\x1c\xc4\xfb\xf4\x33\x8d\xe2\xd0\x8c\x4c\xa5\xf3\x64\x9a\x69\x63\x5b\xf8\x1a\x80\x2f\x12\x3e\xe1\xf6\x0e\x00\x00\xff\xff\xa2\x6a\xa2\x81\xb5\x00\x00\x00")

func capabilitiesToscaCapabilitiesEndpointAdminBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesEndpointAdmin,
		"capabilities/tosca.capabilities.Endpoint.Admin",
	)
}

func capabilitiesToscaCapabilitiesEndpointAdmin() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesEndpointAdminBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Endpoint.Admin", size: 181, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesEndpointDatabase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\x73\xcd\x4b\x29\xc8\xcf\xcc\x2b\xd1\x73\x49\x2c\x49\x4c\x4a\x2c\x4e\xb5\xe2\x52\x00\x83\x94\xd4\xa2\xcc\xb2\xd4\x94\xf8\xb4\xa2\xfc\x5c\x2b\x05\x3c\x3a\xb9\x00\x01\x00\x00\xff\xff\x6b\xd3\x2d\x74\x56\x00\x00\x00")

func capabilitiesToscaCapabilitiesEndpointDatabaseBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesEndpointDatabase,
		"capabilities/tosca.capabilities.Endpoint.Database",
	)
}

func capabilitiesToscaCapabilitiesEndpointDatabase() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesEndpointDatabaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Endpoint.Database", size: 86, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesEndpointPublic = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x41\x4f\xc3\x30\x0c\x85\xef\xfc\x0a\x4b\xdc\xfb\x03\x7a\xe0\xc0\xe0\x30\x09\xa1\x49\xc0\x79\x72\x1b\x77\xb5\xc8\xe2\x10\x3b\x0c\xfe\x3d\x69\x9a\x4d\x20\xa1\xdd\xa2\xe7\x97\xf7\x3e\xdb\x44\x47\xec\x46\x8c\x38\xb0\x67\x63\xd2\xee\x31\xb8\x28\x1c\xac\xdb\xe5\xc1\xf3\xd8\xdf\x00\x38\x4a\xfc\x49\x6e\x3f\x25\x39\xf6\x70\xe5\x4f\xf1\xc6\x24\x91\xd2\xa2\x2e\x3f\x01\x6e\x61\x33\x63\x38\x10\xd8\x4c\x25\x68\xc2\xec\x0d\x02\xd9\x49\xd2\xfb\x3e\xe0\xb1\x0c\x04\xb2\xae\xf3\x89\x93\x1a\xc4\x5a\x7c\x36\xc1\x24\x39\xb8\x9a\xf5\xfb\x5b\x0f\xbb\xb7\xfb\xa7\xed\xa6\x0e\x26\x2f\x68\x1c\x0e\x6b\xe5\x02\xac\x63\xe2\x68\x2c\xa1\x87\xbb\x26\x02\x70\x70\x3c\xa2\x91\x96\x32\xb4\xda\xd8\xba\xd0\xb9\x44\xaa\xa0\xb3\x64\xef\x60\x20\x40\xef\x65\xf1\x3a\x58\xb6\x06\x84\x28\xe2\x41\xa6\x4b\x17\x6c\x77\x2d\x07\x53\xb1\xab\xca\xc8\xd5\x7f\x62\x9b\x6b\x76\xc3\xed\x5a\xbf\x7d\xc7\x42\x3d\x94\x18\xc2\x70\x01\xad\x07\xe9\x61\x42\xaf\xd4\x44\x35\xb4\xac\x3d\xd0\x57\xb9\x24\x1f\x29\x18\xfa\x3a\x72\x41\xd7\xdd\xff\x5b\xf3\xb5\x34\x4a\x7d\xa3\x87\xf3\x61\x13\x1d\x58\x8d\xd2\x0a\xf5\xf0\xfc\xf2\x87\x45\x2d\x95\x45\x9a\x94\xe8\x23\x73\x22\xd7\x58\x8a\x72\x0d\xe7\x27\x00\x00\xff\xff\x92\x1f\xb2\x91\x39\x02\x00\x00")

func capabilitiesToscaCapabilitiesEndpointPublicBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesEndpointPublic,
		"capabilities/tosca.capabilities.Endpoint.Public",
	)
}

func capabilitiesToscaCapabilitiesEndpointPublic() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesEndpointPublicBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Endpoint.Public", size: 569, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesNetworkBindable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\xcb\x4b\x2d\x29\xcf\x2f\xca\xd6\x73\xca\xcc\x4b\x49\x4c\xca\x49\xb5\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\xc9\x2f\x3f\x25\x95\x0b\x10\x00\x00\xff\xff\x4a\x92\x65\xcf\x4d\x00\x00\x00")

func capabilitiesToscaCapabilitiesNetworkBindableBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesNetworkBindable,
		"capabilities/tosca.capabilities.Network.Bindable",
	)
}

func capabilitiesToscaCapabilitiesNetworkBindable() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesNetworkBindableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Network.Bindable", size: 77, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesNode = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\xc9\x2f\x4e\x4e\xd4\x4b\x4e\x2c\x48\x4c\xca\xcc\xc9\x2c\xc9\x4c\x2d\xd6\xf3\xcb\x4f\x49\xb5\xe2\x52\x50\x48\x49\x2d\xca\x2c\x4b\x4d\x89\x4f\x2b\xca\xcf\xb5\x52\xc0\xa2\x30\x28\x3f\xbf\x84\x0b\x10\x00\x00\xff\xff\xde\x35\xde\x26\x41\x00\x00\x00")

func capabilitiesToscaCapabilitiesNodeBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesNode,
		"capabilities/tosca.capabilities.Node",
	)
}

func capabilitiesToscaCapabilitiesNode() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Node", size: 65, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesOperatingsystem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\xcd\xc1\xad\x83\x40\x0c\x84\xe1\x3b\x55\xb8\x02\x0a\xd8\x26\x9e\xf4\x52\x40\x64\x76\x87\xc4\x12\xe0\x8d\x6d\x90\xe8\x3e\xa0\xa0\x5c\x92\x1c\xb8\xfe\x9a\x4f\x13\xea\x99\xdb\xcc\x95\x3b\x19\x24\x04\xde\xfe\x55\x18\x87\x4c\xb7\xcb\xea\x81\x31\x35\x44\x05\x26\x0b\xca\xb5\x37\x1d\x13\x7d\x31\xff\xaa\xb1\xed\xaa\xe9\x86\xf7\xb2\x2b\x22\xb6\x7c\x97\x40\x8e\xd9\xf0\x2a\x44\xb1\x56\x24\xf2\xb0\xed\xe1\x48\x86\xc7\x2c\x86\x92\xa8\xe7\xc1\xd1\xbc\x67\xe7\x48\x91\x7d\xd2\xcd\x21\x3a\x9d\xa4\x0b\xcc\x3f\xd4\x11\x7f\xb0\x67\x00\x00\x00\xff\xff\xce\xa7\xfe\x77\x3a\x01\x00\x00")

func capabilitiesToscaCapabilitiesOperatingsystemBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesOperatingsystem,
		"capabilities/tosca.capabilities.OperatingSystem",
	)
}

func capabilitiesToscaCapabilitiesOperatingsystem() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesOperatingsystemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.OperatingSystem", size: 314, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcc\xb1\x0d\x02\x31\x0c\x85\xe1\xfe\xa6\x78\x13\xdc\x00\xd7\xa1\x0c\x80\x04\x59\xc0\x09\x46\xb1\x14\x70\x64\x5b\x48\xd9\x9e\x14\xd0\x5c\xfd\xbe\xf7\x87\x7a\xa5\xbd\xd2\xa0\x22\x5d\x42\xd8\xf7\x9b\x6a\x1c\x1b\xf0\x60\xaf\x26\x23\x44\xdf\x07\x72\x63\xe4\xeb\x3d\x5d\x60\x6b\x46\xfa\x1f\x26\xf2\x1c\x0c\xea\x1d\x1a\x8d\xed\x87\x0a\x39\x9f\x91\xaf\xa2\xc9\x87\xf1\x34\x7d\x6d\xdf\x00\x00\x00\xff\xff\x74\xb4\xdd\x64\x79\x00\x00\x00")

func capabilitiesToscaCapabilitiesRootBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesRoot,
		"capabilities/tosca.capabilities.Root",
	)
}

func capabilitiesToscaCapabilitiesRoot() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Root", size: 121, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _capabilitiesToscaCapabilitiesScalable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcb\x41\x0a\xc2\x30\x10\x85\xe1\xbd\xa7\x78\x27\x28\xb8\xcd\x31\xf4\x00\x65\x9a\xbe\xca\x40\x9a\x09\x93\x51\xf4\xf6\x5a\xac\x3b\x41\x70\xf9\x7e\xde\x17\xd6\xb3\x0c\x59\x9a\x4c\x5a\x34\x94\x7d\x38\x67\x29\x32\x15\xa6\x03\x30\xd3\xf5\xc6\x79\x5c\xdc\xd6\x84\x2f\xe7\x93\x59\xbc\x7e\xcd\xad\xd1\xb7\xb2\x29\x60\xd5\x3a\x6a\xed\x21\x35\x7f\x12\x10\x8f\xc6\x04\xad\xc1\x0b\x7d\x6f\x33\x17\xb9\x96\x48\x38\xbe\x9d\xdc\xff\x72\xfb\xfc\x65\x9f\x01\x00\x00\xff\xff\x68\x7c\xf2\x28\xee\x00\x00\x00")

func capabilitiesToscaCapabilitiesScalableBytes() ([]byte, error) {
	return bindataRead(
		_capabilitiesToscaCapabilitiesScalable,
		"capabilities/tosca.capabilities.Scalable",
	)
}

func capabilitiesToscaCapabilitiesScalable() (*asset, error) {
	bytes, err := capabilitiesToscaCapabilitiesScalableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capabilities/tosca.capabilities.Scalable", size: 238, mode: os.FileMode(438), modTime: time.Unix(1433921141, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"capabilities/tosca.capabilities.Attachement": capabilitiesToscaCapabilitiesAttachement,
	"capabilities/tosca.capabilities.Container": capabilitiesToscaCapabilitiesContainer,
	"capabilities/tosca.capabilities.Endpoint": capabilitiesToscaCapabilitiesEndpoint,
	"capabilities/tosca.capabilities.Endpoint.Admin": capabilitiesToscaCapabilitiesEndpointAdmin,
	"capabilities/tosca.capabilities.Endpoint.Database": capabilitiesToscaCapabilitiesEndpointDatabase,
	"capabilities/tosca.capabilities.Endpoint.Public": capabilitiesToscaCapabilitiesEndpointPublic,
	"capabilities/tosca.capabilities.Network.Bindable": capabilitiesToscaCapabilitiesNetworkBindable,
	"capabilities/tosca.capabilities.Node": capabilitiesToscaCapabilitiesNode,
	"capabilities/tosca.capabilities.OperatingSystem": capabilitiesToscaCapabilitiesOperatingsystem,
	"capabilities/tosca.capabilities.Root": capabilitiesToscaCapabilitiesRoot,
	"capabilities/tosca.capabilities.Scalable": capabilitiesToscaCapabilitiesScalable,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"capabilities": &bintree{nil, map[string]*bintree{
		"tosca.capabilities.Attachement": &bintree{capabilitiesToscaCapabilitiesAttachement, map[string]*bintree{
		}},
		"tosca.capabilities.Container": &bintree{capabilitiesToscaCapabilitiesContainer, map[string]*bintree{
		}},
		"tosca.capabilities.Endpoint": &bintree{capabilitiesToscaCapabilitiesEndpoint, map[string]*bintree{
		}},
		"tosca.capabilities.Endpoint.Admin": &bintree{capabilitiesToscaCapabilitiesEndpointAdmin, map[string]*bintree{
		}},
		"tosca.capabilities.Endpoint.Database": &bintree{capabilitiesToscaCapabilitiesEndpointDatabase, map[string]*bintree{
		}},
		"tosca.capabilities.Endpoint.Public": &bintree{capabilitiesToscaCapabilitiesEndpointPublic, map[string]*bintree{
		}},
		"tosca.capabilities.Network.Bindable": &bintree{capabilitiesToscaCapabilitiesNetworkBindable, map[string]*bintree{
		}},
		"tosca.capabilities.Node": &bintree{capabilitiesToscaCapabilitiesNode, map[string]*bintree{
		}},
		"tosca.capabilities.OperatingSystem": &bintree{capabilitiesToscaCapabilitiesOperatingsystem, map[string]*bintree{
		}},
		"tosca.capabilities.Root": &bintree{capabilitiesToscaCapabilitiesRoot, map[string]*bintree{
		}},
		"tosca.capabilities.Scalable": &bintree{capabilitiesToscaCapabilitiesScalable, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

