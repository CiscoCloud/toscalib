// Code generated by go-bindata.
// sources:
// NormativeTypes/capability_types
// NormativeTypes/interface_types
// NormativeTypes/node_types
// NormativeTypes/relationship_types
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _capability_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xcd\x8e\xdb\x46\x0c\xbe\xf7\x29\x08\xf4\x9a\x18\xcd\xd5\x87\x02\xbb\xde\xa0\x5d\xa0\x4d\x8c\x78\xdb\x4b\x51\x08\xf4\x88\xb2\x06\x19\xcd\xa8\x1c\x6a\x13\xe7\xe9\x4b\xc9\x23\x45\xb5\x14\xff\x6d\x80\x5e\x0c\x8b\xc3\xbf\xf9\xf8\x91\x1c\x83\x35\x6e\xad\xb3\xb2\xcf\x64\x5f\x53\xfc\x01\x40\x42\x34\xb8\x18\x0e\x2c\xc5\xc5\x9d\x08\x9a\xb2\x22\x2f\x4b\x55\x00\xc8\x89\xed\x33\xe5\x59\xc1\xa1\x5a\xce\x19\x7c\x08\x41\xe6\x5d\xad\x82\x17\xb4\x9e\xf8\x3a\x4f\x00\x35\x87\x9a\xb8\x95\x1d\x2c\x01\x7c\x53\x65\xa6\x6e\x86\x6f\x8d\xa7\x57\x58\x82\xf5\x42\x3b\xe2\x41\xca\xf4\x4f\x63\x99\xf2\x25\x14\xe8\x22\x0d\x72\x13\x7c\x14\xd6\x64\x64\xe4\x02\xe0\x35\xec\x98\x50\x88\xb3\xc0\x99\x9a\xa2\x5b\xc2\x9b\x74\xae\xe1\x34\x55\x15\x92\x37\xfb\xe3\xb8\x9a\xbb\x43\x7e\xdd\x78\x2b\x8b\x41\xe9\x7b\x66\xf1\xd3\xe2\x0d\xfc\xf2\xeb\x97\xa4\x95\xdb\xf8\x31\x8b\xf6\x0b\x9d\xca\xa3\x3d\xff\xae\x29\xc0\xef\xf7\x49\xa5\xa2\xea\xff\x0a\x3f\xc3\x93\xb7\x3e\xaf\x83\xbd\x96\xa0\x73\xb4\x52\x89\x04\x13\xdc\xe4\x5e\xc2\xd6\xef\x06\x61\x4e\x05\x36\x4e\xd4\xbb\xa9\x7b\xcb\xc0\x72\x6c\xb5\x56\xd9\x03\x15\x67\x40\x88\x64\x1a\x9e\x20\xb9\x0d\xc1\x11\xfa\x69\xc8\xb1\x69\xc3\x2e\xab\x51\xca\x33\xe9\xce\xc7\x6d\x33\xce\x3c\x56\xd3\x22\x5e\x62\xed\x49\x3e\x05\xfe\x78\xbb\x83\xd1\x95\xd6\x1f\x1e\xff\xbc\x7b\x7a\x9b\x0e\xac\x92\xc7\xa2\x04\xbe\xb4\x08\x31\x34\x6c\x2e\xa0\xd4\x33\x3a\x9b\x67\xfa\xdb\x68\xc1\xe1\xaf\x64\xf7\x0a\x04\x79\x47\xf2\x0a\x6a\x22\x86\xbf\x47\xe8\x4c\xa6\x4b\x85\xf5\xed\x8c\xae\xac\xcf\x1c\xf9\x9d\x96\x6b\x98\x29\x00\x3a\x57\x79\x9f\x45\x53\x52\x85\x63\xfd\xaf\x0c\xda\xd4\x64\xba\x03\x14\x05\x60\xdb\xc8\x57\xba\xda\x3a\xc3\x3c\x67\x8a\x93\x4c\x07\xac\x4e\xb4\xcb\xe2\x2e\xd7\x9c\x2e\x6c\x9a\xde\xa8\xd3\xfe\x11\x56\x25\xfa\x1d\x41\x2f\x4d\x24\xd6\xda\xe5\xd6\xb4\xb5\x53\x17\x20\xdc\x10\xb4\x0e\xc1\x4a\xec\xcb\x05\xa1\x18\x01\x36\xed\xc0\xd4\x0d\x9d\xf1\x99\xf4\x1f\x50\x70\x8b\x71\x44\xbf\x6b\x6e\x71\xca\xf3\xba\xd9\x3a\x6b\x6e\x41\x66\x7a\xa1\x01\x2b\x29\x69\x00\x61\xdc\x3d\x2d\x54\x4d\x3c\x9c\x17\x96\xa3\x40\xdd\x85\xef\x95\xa0\x08\x8d\xcf\xe7\xda\x0e\xd6\x7f\xdc\xff\xf6\xb8\x4a\x47\x85\x0b\x28\x5a\xf4\x31\x1c\xd1\xb0\xad\xc5\x06\xbf\x84\x9f\x47\xe4\x4a\x65\xa2\xa8\x41\x51\xba\xc8\x29\x66\xa2\x13\xc4\x32\x34\x2e\x87\x2d\x01\x3a\x17\x5a\xdd\xfc\x50\x4a\xd4\xce\x08\xae\xab\x62\x8a\x07\x8f\xeb\xe4\x07\x95\x01\x18\x63\x30\xb6\xd3\xff\x64\xa5\xec\x7c\xa7\xa4\x17\xb7\x8c\x38\x65\x84\xa0\xe8\xa2\x07\xfa\xac\xc8\xda\xf6\x21\x82\xae\x5f\x83\x3e\x1e\x0d\xa0\xff\x5c\xf9\x49\x63\x87\xee\x3f\x3a\xe8\xa1\x66\xda\xd9\xa8\x9b\xe5\x90\xde\xc3\xbb\xcd\x55\xc3\x4b\x25\xe7\x12\x9b\xa1\x48\x0f\xc0\xbd\x02\x8f\x5b\x47\x17\x32\xeb\x5d\xc8\xbf\xd1\x03\xed\xc9\x8b\x9f\x63\xef\x35\xed\xae\x82\x9b\xbd\x02\x52\xbd\x7c\x7b\x22\x9b\xd2\x0a\x19\x99\xd9\x67\x17\xed\x84\x4e\xf5\x16\x43\x7d\x0f\x1d\x66\x63\x5b\xf7\x5b\x1c\x3c\x13\xc7\x19\xdb\x24\x3e\x61\xfc\x0d\x84\x7a\x30\x8f\xd8\xf8\xf4\x7e\xb3\xba\x03\x56\x05\x58\x0d\xaf\x6f\x78\xd2\x58\x6d\x9f\x41\xd0\x6e\xe1\xa4\xd4\x4e\xb6\x63\xa5\x98\xca\xd3\xb5\xe2\x7c\xf0\x4d\xfb\x02\xbb\x9c\x62\x27\xaa\xd9\xee\x2b\xab\xbb\x0c\xbd\xa1\xb3\xef\xec\xa1\x77\xfb\xcd\x56\xe1\xe7\x17\x58\x27\xc1\x79\x0f\xff\x06\x00\x00\xff\xff\x6e\x2b\x9e\x3c\xc4\x0c\x00\x00")

func capability_typesBytes() ([]byte, error) {
	return bindataRead(
		_capability_types,
		"capability_types",
	)
}

func capability_types() (*asset, error) {
	bytes, err := capability_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capability_types", size: 3268, mode: os.FileMode(504), modTime: time.Unix(1451483358, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interface_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x41\x92\xb3\x20\x10\x85\xf7\x39\x45\x5f\xe0\xe7\x00\xd9\xfe\x07\x98\xc5\x1c\xc0\xea\x40\xab\x54\x19\x9a\x6a\x3a\x49\x79\xfb\x41\x8c\x8e\x26\x4e\x0d\x35\x3b\x85\x7e\xdf\x7b\x3e\xd0\x07\x25\x69\xd1\x52\xa3\x63\xa4\x74\x02\x50\x4e\x16\xcd\xba\x9e\x4c\x60\x47\x66\xf0\x2d\xd9\xd1\x0e\x64\x3e\x15\x83\x43\x71\xe7\x3c\x0b\x60\x85\x50\x69\x7e\x06\x70\x94\xac\xf8\xa8\x9e\xc3\x19\x96\x41\x58\xb5\xcf\x69\xe0\x48\x82\xd3\x90\x99\x19\x1c\x5a\xdf\xdd\xa4\x1e\xb3\x08\x5e\x49\x49\x51\xb4\x96\x52\x86\xdf\x09\x1c\xeb\x01\x1c\x5f\xf5\x8e\x06\xaa\xef\x63\x9e\xde\x33\xde\xfa\x17\x1a\xca\x66\xea\x7d\x34\xff\xf7\x5d\x45\xa1\x66\x6d\xa3\x49\x7c\x13\x7b\x6c\xfe\xb1\x58\x64\xfe\xa4\xfa\xf7\xdd\xa1\xf6\xf9\x53\x8a\x12\x28\xb8\xc8\xd9\xda\x1c\xc0\x73\x5b\x1d\x1d\x97\xfb\x0b\x7c\x56\xbe\xc2\x39\xe9\x5f\xa2\x67\x59\x55\xf6\x3d\xbe\x3a\xfc\x3b\xfe\x30\x3d\x3a\x57\xcd\x0c\xac\xbe\x1d\xb7\x51\xa7\x3f\x0a\xb8\x05\x5c\xe0\x65\xe1\x42\x3e\x74\x13\x99\x1c\xdc\x3d\xe6\xdd\xdd\xc9\xaf\xbe\xb5\x55\x6d\x7c\xb7\x36\xc5\x77\x1b\xe4\xd1\x7b\xdb\x83\x4f\xf9\xed\x01\x78\x47\x3f\xe0\x25\xdf\xcd\x9f\x22\xcc\xac\xc6\xf6\x18\x3a\x72\xd5\x31\x9e\x8e\x89\xaf\x94\xaf\xc8\x74\xe3\x75\x04\x16\x40\x55\xf1\x97\x9b\x96\x60\x9b\xac\x4f\x7e\xc1\x0b\x5d\xf9\x5e\x7f\x88\xf3\xf8\xbe\x5d\x03\xa7\xaf\x00\x00\x00\xff\xff\x5a\xa7\x99\x8c\xeb\x04\x00\x00")

func interface_typesBytes() ([]byte, error) {
	return bindataRead(
		_interface_types,
		"interface_types",
	)
}

func interface_types() (*asset, error) {
	bytes, err := interface_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interface_types", size: 1259, mode: os.FileMode(504), modTime: time.Unix(1451483409, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xef\x53\x0c\xb0\x97\x16\xd8\x18\x5b\xa0\x27\xdf\xe2\x78\xdb\x2e\xd0\x8d\x83\x75\x16\x3d\x14\x0b\x81\xa6\x68\x9b\x5d\x8a\x54\x49\x2a\x89\x7b\xea\x6b\xf4\xf5\xfa\x24\x1d\x52\x14\x4d\x4b\xb2\xa5\x38\x3f\xa8\x2e\x71\xa8\xf9\xe1\xcc\x7c\xdf\x70\x28\xa9\x72\x96\xd9\x5d\xc9\xcc\x1b\x00\xab\x0c\x25\x13\xb7\x64\x26\x33\xa1\xe8\xb7\xa5\x55\x9a\x6c\xd8\x14\xdf\x01\xe4\x4c\xf3\x3b\x96\x67\x6b\xad\x8a\xe9\x81\xec\x67\xa5\xac\x17\x29\xb5\x2a\x99\xb6\x9c\x99\x5a\x05\xc0\xf0\xbf\x58\xf3\x1b\x1d\xa0\xa3\x29\xa0\xa2\x20\xfa\xa2\x92\xdc\x4e\xdc\xfb\xf8\x9a\x2a\x69\xac\x26\x5c\x5a\xb3\xd7\x01\xb8\x80\x8d\x66\xc4\x32\x9d\x29\x9d\xb1\x3f\x2b\x22\xa6\xf0\x03\x7c\x9a\x05\x91\x3b\x25\xaa\x82\x65\x3c\xef\xf8\xb1\x9a\xcb\x4d\x5c\xd4\xa8\xca\x35\xcb\xa7\xb0\x26\xc2\x34\x5e\x8d\x24\xa5\xd9\x2a\x7b\x9e\x3e\x25\x25\x59\x71\xc1\xd3\x90\x89\xb5\x84\x6e\x0b\x26\x6d\xdb\x60\x9d\xb3\x54\x67\x72\x19\x85\x5b\xf9\xbf\x52\x45\x59\xd9\xf1\xa9\x47\xaf\x9a\xaf\x50\x23\xee\xa3\x44\x1d\xcc\x5a\x46\xf2\x5c\x33\x63\x4e\x46\x57\x56\x2b\xc1\xe9\x28\x51\xc9\xec\xbd\xd2\xdf\x3a\x42\x05\x29\xe3\x0a\x86\xa3\x77\x99\xa1\x5b\x56\x90\xb4\x92\x69\x1a\x72\x62\x89\x07\xde\x24\x58\x9c\x5c\xd7\x7f\x3f\xca\xb5\x6a\xb6\xa5\xb4\x7d\x01\x47\x37\x68\x36\x7a\x09\x65\x75\x25\x88\xae\x2e\x00\xd1\x4f\x44\x66\x52\xfc\xd7\x4f\xac\xde\x6e\xb8\x9e\xcd\xe3\x4a\x35\x3d\xca\xae\x44\x50\x33\x41\x2c\x47\x16\x6c\x79\xd9\x28\xa4\x6b\x8d\x7d\x66\x6e\x55\xa2\xa6\x28\xad\xb4\x66\x92\x62\xf1\xe1\xf7\xf7\xef\xe0\xcb\xf5\x6c\xf1\xe5\x7a\xfe\x61\xfe\x15\x8e\xc2\x74\xab\xcc\x18\x80\x5e\x29\x69\x91\x91\x4c\x47\xd1\x3b\x22\x78\x9e\x19\x55\x69\x1a\x5a\x07\x3a\x4d\x83\x5b\xaa\xb5\xbd\x27\x9a\x39\x08\x2b\x89\xa9\xf8\xfa\xa6\xa9\x56\x5e\x2a\x3e\x8a\x17\x1f\x82\xe8\xe4\x32\x2f\xb8\x0c\xf2\xaa\x83\x85\x1e\xcd\x05\x76\x20\x4c\x98\xdc\x2c\x77\xc6\xb2\xa2\xa1\xb9\xeb\x39\x2b\xd1\xe9\x45\x3d\x06\x96\x41\x34\x48\xae\xb8\xcc\xd1\xda\x08\xc5\x06\x5e\x33\xd4\x08\x06\x0e\x19\x1d\x32\x39\xb9\x2c\x4b\x64\x9b\xaf\xea\x68\x7e\xf7\xc3\xf4\xb0\x88\x83\xe8\xec\x16\xb3\x0f\x9c\x7d\x52\xc3\xc8\xfc\x05\xb7\xc2\xf2\x85\x3c\x1a\xf5\xe7\x4a\x5a\x5e\x0c\x76\xb4\x0e\x7a\x9e\x1b\xc1\xe7\x41\x21\xdd\xe2\x1c\x3b\xca\x8a\x98\xa7\x9c\x8b\x92\x14\xdd\x73\xf1\xf0\xbc\x41\x0b\x54\xf3\xd2\xa3\x04\xec\x96\x61\x4f\xda\x20\x6a\x84\xd7\x05\xb5\xf6\x6b\x79\xd8\x4a\xd2\x30\xdb\x66\x91\x45\x6c\x93\x14\xb3\x63\xd7\x29\xf9\x1f\x95\xc4\x58\xc4\x0e\x37\x11\xed\x82\x61\xfa\x8e\x53\x06\xf7\x5c\x08\x10\x1c\x6b\x2c\x31\x46\x58\x2b\xed\x65\x82\xd5\x0a\xc5\x1e\x1b\x8e\xf2\xbf\x31\x1e\xa7\x0c\x84\x52\x85\x00\xa9\x83\x73\xd6\xe7\x33\x20\x8e\xfb\xdc\x8d\x04\x4e\x72\xe0\x20\x2f\x89\x31\x48\xbf\xa1\x53\xfc\xf8\x36\x1a\x03\xde\xbb\x7b\x83\x3b\x48\xb7\x76\xd2\xff\x2b\xd2\x73\x3e\xfb\xb4\x3c\x97\x99\xfd\x44\x6a\x8a\x9d\x9d\xd3\xa0\xe7\x7b\x04\xb6\x77\x79\x1e\xd5\xbb\x64\xd1\xc8\xa3\x6c\x64\x7d\xfb\xc1\x71\xaa\xee\xce\x7a\x5f\xf1\x3f\x2d\x1b\xf0\x3f\x82\x5c\xa3\xdd\x47\xd2\xa5\x8e\x8e\xb1\x0c\x88\xcc\xbd\x69\x66\xac\xe9\x96\x11\xff\x7f\x91\x43\xbd\xb7\xe9\xc1\xd7\x56\xa5\x7f\x55\x24\x9f\x61\x9f\xc4\xf1\x43\x3f\xa1\x23\xbe\x85\xdb\xd9\xbc\x19\xa1\xc5\x46\x69\x6e\xb7\xc5\x99\xc5\x36\x38\xf1\x55\x18\x01\x7b\x40\x27\xdc\x91\x92\x88\xa3\xe8\xa7\x82\x8f\x9b\xd5\x23\xe4\x6f\xfc\xb4\x1c\x15\x06\xc7\xaf\x5e\x00\xfc\x24\x94\x1f\x53\xe0\xbb\x8f\x37\xdf\x87\x4d\xfc\xfb\xf7\x3f\x06\x94\xac\x01\xe2\x9d\x34\xe3\x36\xee\x5c\xba\xfb\x91\x64\x14\x61\x73\x6a\x72\x25\xed\xe1\x22\x44\x79\xba\xf5\x34\xb1\x3d\xaa\xb1\x7c\x56\xee\xbe\xf1\xb8\x51\xb4\x27\x1b\x57\x75\x58\x5c\x79\xcc\x63\x23\x00\x84\x7d\xa1\xb4\x3b\xf1\x48\x0e\xab\x1a\x5b\x79\x1a\x59\xfb\xb6\xba\x58\xfd\x81\x16\x92\xeb\xea\x38\x1c\xf6\x40\xb1\x75\x3e\x1f\xc3\x5f\x33\x4b\x84\xeb\x6d\x5b\xac\x7b\xc3\x8d\x12\xad\x4b\x6e\x92\x94\xbe\x7b\xee\x7b\xf8\x79\xb6\x97\x2a\xc8\xc3\xab\x7a\x6c\xd3\xa5\x89\xba\xce\xf3\xc1\x71\x31\x9e\x3e\xad\xd2\xb9\x52\x34\x6d\x23\x01\xc5\x2d\x52\xe0\x76\xb1\xbc\xba\x84\x6b\x14\x83\x5b\xb4\x8a\x6d\x41\x80\x42\x6e\xe8\xf0\xc6\xb7\xa3\xf8\xda\x84\x7a\x83\x2b\xb7\x37\xd8\xbd\x13\x7b\xc7\x43\x57\xfd\x5a\x68\x70\x42\x73\x4d\xe6\x94\x44\x5f\xaf\x59\x63\xb6\x2b\x3d\x66\xf4\x74\x61\x9d\x60\x79\xce\x4a\xcc\x3e\xf2\x6c\xf7\x08\x92\x47\x9b\xf5\xd3\x1d\x2d\x62\x7b\x6e\x3d\xc3\xad\x60\xee\xf7\x63\x16\xb2\x4f\xfd\xb0\x29\x40\xda\x15\xa0\xbe\x1b\xba\x63\x54\xaf\x09\xdd\x67\x6a\x69\xf1\xcc\x23\xdd\xe3\xbe\x76\xbe\x97\xf7\x3b\x9f\x08\xbe\x66\x74\x47\x05\x9b\x34\x7a\x2d\x94\x75\x46\x8d\x27\x9d\x54\xb9\x2a\x90\x4e\x17\xa6\x64\x94\xaf\xb1\x49\x9b\x60\x1d\xa9\x16\xcc\xc3\x1d\xd3\x66\x3f\xb4\xc6\xf5\x2c\xac\xb7\xc3\x3a\x14\x3f\x76\xb2\xf9\x81\x38\xa3\xb8\x8e\xa6\x38\xb2\xb5\x37\x39\xfb\x0f\x1e\x57\x51\xf2\xff\x32\xbc\x86\xcf\x5a\xe7\xce\xaf\xa9\xa9\xdf\xd8\xea\x9c\x8b\x74\xb7\x9e\xd8\x1f\x2d\x7b\xb0\x99\x8e\x9d\x68\x9f\xd1\x01\x3e\xe3\x91\x74\xce\xd0\xfc\xda\x59\xc7\x54\x2d\x71\xc2\x7c\x9e\x1b\x7d\x34\xf6\x7c\x37\xf9\xb7\x70\x53\x7f\xac\x7c\x07\x82\xec\xb0\xbf\xff\x18\xbf\x15\x99\xe4\x8e\xb2\x4f\xf5\x88\x11\xa6\xe6\xca\x28\x8d\x83\x8f\x4c\x2f\x38\x42\x1f\x22\x16\x5b\xdf\x7f\x01\x00\x00\xff\xff\x6c\x77\x21\x08\x7e\x17\x00\x00")

func node_typesBytes() ([]byte, error) {
	return bindataRead(
		_node_types,
		"node_types",
	)
}

func node_types() (*asset, error) {
	bytes, err := node_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node_types", size: 6014, mode: os.FileMode(504), modTime: time.Unix(1451483434, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _relationship_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xcb\xaa\xdb\x30\x10\xdd\xf7\x2b\xe6\x07\x6a\xe8\xd6\xbb\x90\x16\xba\x6a\x20\xf5\xae\x14\x33\x91\xc6\xf6\x80\x2c\xa9\xa3\x49\xa0\x7f\x5f\x59\x4e\xe2\xf4\xe6\x71\x1f\x90\xa5\xad\xf3\x98\x73\x34\x12\x72\xa8\x1c\x7c\x1a\x38\xb6\xfa\x37\x52\xfa\x04\xa0\x21\x19\xac\x2e\x8f\x52\xb5\x52\x45\x33\x50\x6a\x42\x9d\x11\x00\x96\x84\x0f\x64\xdb\x4e\xc2\x58\xdf\x64\x6c\x43\xd0\x02\x3d\xa0\x63\xdb\x2a\x4a\x4f\x3a\x7b\xd4\xf0\xeb\x48\x31\x18\x71\xc7\x8e\x95\xe9\xe4\x31\x92\x57\xf8\x5d\x98\x51\x42\x24\x99\xce\x66\x53\x00\x17\x4c\xb1\x38\x7d\xe7\x61\xb3\x60\x0d\x49\x85\x7d\x7f\xfe\x69\xf2\x10\x2a\xc8\x5e\xd3\x82\x04\xf8\x0c\x23\xfb\xd6\x91\xef\x75\xa8\xe1\xcb\xf1\xc4\xd2\x81\x0d\xbd\xa2\x28\xf4\x67\xcf\x42\xb6\x86\x0e\x5d\xa2\x3b\x2d\xad\x83\xf7\x64\xf4\xa9\x2d\x7d\xf3\x36\x06\x7e\xd0\x91\xc9\x63\xe6\x0e\x19\xdd\xcb\x4c\xb3\x9a\x45\xc5\x62\x50\xad\xcf\xc8\x77\xe6\xfc\x4a\x91\xbc\x4d\x1b\xff\xbc\x98\x3f\x82\xa5\x12\xf1\x96\xdc\xf7\x90\x94\xec\x33\xed\xf3\x4d\x6a\xde\x1f\x92\xbb\x33\x4c\x9a\x27\xff\x64\x84\x63\xd9\x4b\x68\x06\x82\x66\xf3\x73\xbd\x02\xc9\x00\xd8\x5e\x70\xa0\xc9\x86\x80\xce\x41\xd0\x21\x2b\xcf\xb0\x1d\x26\xba\x86\xa5\x63\x2a\x98\x42\x15\x17\xd4\xbc\x91\xbb\xbd\x2e\x17\x5d\xa6\x6a\xd9\x3e\x5c\xdd\x19\xe4\x71\x7c\xb4\xe1\x79\x9d\x48\x3a\x34\x8b\x76\xce\xdf\x71\xbf\x97\x2b\xd6\x5c\xc5\x42\xf8\xaf\x95\xea\x4c\xbb\x5b\xda\x14\xe0\xed\xcf\x63\x79\x50\x1f\x7e\x24\xff\x02\x00\x00\xff\xff\x25\xc5\x12\x8d\xe3\x04\x00\x00")

func relationship_typesBytes() ([]byte, error) {
	return bindataRead(
		_relationship_types,
		"relationship_types",
	)
}

func relationship_types() (*asset, error) {
	bytes, err := relationship_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "relationship_types", size: 1251, mode: os.FileMode(504), modTime: time.Unix(1451483458, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"capability_types": capability_types,
	"interface_types": interface_types,
	"node_types": node_types,
	"relationship_types": relationship_types,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"capability_types": &bintree{capability_types, map[string]*bintree{}},
	"interface_types": &bintree{interface_types, map[string]*bintree{}},
	"node_types": &bintree{node_types, map[string]*bintree{}},
	"relationship_types": &bintree{relationship_types, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

