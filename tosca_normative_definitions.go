// Code generated by go-bindata.
// sources:
// NormativeTypes\all\tosca.capabilities.Attachement
// NormativeTypes\all\tosca.capabilities.Container
// NormativeTypes\all\tosca.capabilities.Endpoint
// NormativeTypes\all\tosca.capabilities.Endpoint.Admin
// NormativeTypes\all\tosca.capabilities.Endpoint.Database
// NormativeTypes\all\tosca.capabilities.Endpoint.Public
// NormativeTypes\all\tosca.capabilities.Network.Bindable
// NormativeTypes\all\tosca.capabilities.Node
// NormativeTypes\all\tosca.capabilities.OperatingSystem
// NormativeTypes\all\tosca.capabilities.Root
// NormativeTypes\all\tosca.capabilities.Scalable
// NormativeTypes\all\tosca.interfaces.node.lifecycle.Standard
// NormativeTypes\all\tosca.interfaces.relationship.Configure
// NormativeTypes\all\tosca.nodes.BlockStorage
// NormativeTypes\all\tosca.nodes.Compute
// NormativeTypes\all\tosca.nodes.Container.Application
// NormativeTypes\all\tosca.nodes.Container.Runtime
// NormativeTypes\all\tosca.nodes.DBMS
// NormativeTypes\all\tosca.nodes.Database
// NormativeTypes\all\tosca.nodes.LoadBalancer
// NormativeTypes\all\tosca.nodes.ObjectStorage
// NormativeTypes\all\tosca.nodes.Root
// NormativeTypes\all\tosca.nodes.SoftwareComponent
// NormativeTypes\all\tosca.nodes.WebApplication
// NormativeTypes\all\tosca.nodes.WebServer
// NormativeTypes\all\tosca.relationships.AttachesTo
// NormativeTypes\all\tosca.relationships.ConnectsTo
// NormativeTypes\all\tosca.relationships.DependsOn
// NormativeTypes\all\tosca.relationships.HostedOn
// NormativeTypes\all\tosca.relationships.Root
// NormativeTypes\all\tosca.relationships.RoutesTo
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _toscaCapabilitiesAttachement = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x83\x23\x90\x5d\x02\x94\x49\x66\xc8\x00\x8a\xe4\x02\x71\x1e\x90\xcf\xc0\x00\x08\x00\x00\xff\xff\x8c\x7b\x9d\x36\x6a\x00\x00\x00")

func toscaCapabilitiesAttachementBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesAttachement,
		"tosca.capabilities.Attachement",
	)
}

func toscaCapabilitiesAttachement() (*asset, error) {
	bytes, err := toscaCapabilitiesAttachementBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Attachement", size: 106, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesContainer = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x83\x33\x50\x55\x1e\x90\x9f\x08\x14\xc9\x03\x8a\x15\x31\x30\x30\x00\x02\x00\x00\xff\xff\xb1\x49\xf9\xfa\x66\x00\x00\x00")

func toscaCapabilitiesContainerBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesContainer,
		"tosca.capabilities.Container",
	)
}

func toscaCapabilitiesContainer() (*asset, error) {
	bytes, err := toscaCapabilitiesContainerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Container", size: 102, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesEndpoint = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x83\x2b\x43\x1e\x43\x0a\x50\x2e\x1f\x28\x92\x07\x14\x67\x60\x00\x04\x00\x00\xff\xff\x77\xf0\x57\x32\x64\x00\x00\x00")

func toscaCapabilitiesEndpointBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpoint,
		"tosca.capabilities.Endpoint",
	)
}

func toscaCapabilitiesEndpoint() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint", size: 100, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesEndpointAdmin = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8a\xbb\x0d\x80\x30\x0c\x05\x6f\x15\x16\x30\x0b\x20\x24\x0a\x06\xe1\x57\x44\x24\x0e\x52\xd2\xb0\x3c\xf0\xa0\xa7\x38\x59\xef\xce\x4d\x57\xce\x14\x83\xef\xfd\x7d\x19\x46\xcb\xc2\xc4\x21\x66\x02\x51\x54\xb1\x51\x54\x2a\x59\xf7\xed\xf6\xfb\x65\x8c\x38\xab\x5a\x96\x71\x79\x63\xd0\x4e\xdf\x82\x27\x00\x00\xff\xff\x18\xa5\x12\x33\x70\x00\x00\x00")

func toscaCapabilitiesEndpointAdminBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointAdmin,
		"tosca.capabilities.Endpoint.Admin",
	)
}

func toscaCapabilitiesEndpointAdmin() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointAdminBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Admin", size: 112, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesEndpointDatabase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8a\xb1\x0d\x85\x30\x14\xc4\xbc\xca\x5f\xe0\xfd\x05\x10\x15\x0c\x12\x20\x45\x44\x48\x90\xf2\x1a\x96\x07\x0e\x7a\x0a\xeb\xa4\xb3\x7f\x5d\x3b\xb6\x9c\xca\xda\x5f\xa7\x61\xfc\x99\x09\xec\x62\x22\x91\x85\x8b\x48\x93\x71\xaa\xf6\xf1\xf6\x59\x19\x23\x85\x45\xae\xea\x29\xfa\x8d\x41\x9d\xbf\x6d\x50\x11\x81\x3b\x00\x00\xff\xff\xb8\xc4\xc5\xed\x76\x00\x00\x00")

func toscaCapabilitiesEndpointDatabaseBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointDatabase,
		"tosca.capabilities.Endpoint.Database",
	)
}

func toscaCapabilitiesEndpointDatabase() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointDatabaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Database", size: 118, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesEndpointPublic = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8a\xb1\x0d\x85\x30\x14\xc4\xbc\xca\x5f\xe0\xfd\x05\x10\x1d\x3d\x2b\x40\xa0\x88\x08\x2f\x48\x09\x05\xcb\x03\x97\x01\x28\xac\x93\xce\xfe\x75\xe5\xda\x53\xf4\xad\x7f\x6e\xc3\xf8\x13\x98\x38\xc4\x4c\x24\x89\x2a\x56\x8a\x4c\x25\x6b\x9b\xb7\xcf\xca\x18\x70\x16\xb9\xac\xc7\xf5\x1b\x23\xa7\xba\x56\x05\xe0\x0d\x00\x00\xff\xff\xe6\xaf\x03\x84\x72\x00\x00\x00")

func toscaCapabilitiesEndpointPublicBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesEndpointPublic,
		"tosca.capabilities.Endpoint.Public",
	)
}

func toscaCapabilitiesEndpointPublic() (*asset, error) {
	bytes, err := toscaCapabilitiesEndpointPublicBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Endpoint.Public", size: 114, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesNetworkBindable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x83\x1f\x90\x2e\x61\x28\x07\xaa\x2d\x62\xc8\x06\xf2\x9d\x80\x32\x79\x0c\x29\x60\xb5\x39\x40\x39\x06\x06\x40\x00\x00\x00\xff\xff\x9c\x3f\x99\xbb\x74\x00\x00\x00")

func toscaCapabilitiesNetworkBindableBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesNetworkBindable,
		"tosca.capabilities.Network.Bindable",
	)
}

func toscaCapabilitiesNetworkBindable() (*asset, error) {
	bytes, err := toscaCapabilitiesNetworkBindableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Network.Bindable", size: 116, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesNode = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x83\x1f\x50\x55\x0a\x90\xcd\xc0\x00\x08\x00\x00\xff\xff\x29\x41\x3f\x40\x5c\x00\x00\x00")

func toscaCapabilitiesNodeBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesNode,
		"tosca.capabilities.Node",
	)
}

func toscaCapabilitiesNode() (*asset, error) {
	bytes, err := toscaCapabilitiesNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Node", size: 92, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesOperatingsystem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8a\xc1\x0d\x80\x20\x14\xc5\xba\x8a\x0b\x7c\x17\x30\xae\xe0\xc1\x09\xd4\x10\x43\x04\x34\xc2\x85\xe5\xd5\xc7\x00\x1e\x9a\x97\xb4\xaf\x1b\x72\x8d\xc1\xa7\x63\x7c\x1f\xc3\xe8\xd9\x58\xb8\xc4\x8a\x27\x88\x22\x1c\x59\xa5\x70\x6a\x5b\xb7\xdf\x97\x31\xc9\x3b\x6e\xb5\xe6\x12\x3b\x33\x55\xa5\xc8\x46\xe0\x0b\x00\x00\xff\xff\xf3\x65\xdb\x14\x72\x00\x00\x00")

func toscaCapabilitiesOperatingsystemBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesOperatingsystem,
		"tosca.capabilities.OperatingSystem",
	)
}

func toscaCapabilitiesOperatingsystem() (*asset, error) {
	bytes, err := toscaCapabilitiesOperatingsystemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.OperatingSystem", size: 114, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x43\x10\x50\x55\x3e\x90\xcf\xc0\x00\x08\x00\x00\xff\xff\x76\xe0\xcf\xff\x5c\x00\x00\x00")

func toscaCapabilitiesRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesRoot,
		"tosca.capabilities.Root",
	)
}

func toscaCapabilitiesRoot() (*asset, error) {
	bytes, err := toscaCapabilitiesRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Root", size: 92, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaCapabilitiesScalable = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x99\x21\x91\xa1\x00\x88\x93\x18\x32\x19\x72\x80\xb8\x04\x88\x53\x19\x8a\x81\x32\x25\x0c\xf9\x40\x1a\x24\xaf\x87\x53\x95\x1e\x43\x30\x58\x2e\x07\x2c\x97\x03\x14\x63\x60\x00\x04\x00\x00\xff\xff\xb7\x21\xbd\x70\x64\x00\x00\x00")

func toscaCapabilitiesScalableBytes() ([]byte, error) {
	return bindataRead(
		_toscaCapabilitiesScalable,
		"tosca.capabilities.Scalable",
	)
}

func toscaCapabilitiesScalable() (*asset, error) {
	bytes, err := toscaCapabilitiesScalableBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.capabilities.Scalable", size: 100, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaInterfacesNodeLifecycleStandard = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8b\xc1\x0d\x84\x20\x14\x05\xa7\x95\x6d\xe0\x6f\x03\xc6\x26\xac\x80\x80\x24\x44\x84\x04\xb8\xd0\xbc\xfa\xe2\xd9\x03\x8f\xc9\x64\xfe\x6f\xe9\xf3\xcc\xa9\x1c\xeb\x7d\x19\xc6\x9f\x44\x61\xb0\xd3\x88\x38\xbc\xa8\xcb\x0e\xaa\x7e\x2f\x63\x9f\x85\xc9\x55\x82\xd8\xc8\x2a\xa2\xc8\x33\xf5\xf2\xeb\x36\x5d\x38\x35\x41\xdb\xb4\xf0\x04\x00\x00\xff\xff\x25\x99\xed\x97\x7a\x00\x00\x00")

func toscaInterfacesNodeLifecycleStandardBytes() ([]byte, error) {
	return bindataRead(
		_toscaInterfacesNodeLifecycleStandard,
		"tosca.interfaces.node.lifecycle.Standard",
	)
}

func toscaInterfacesNodeLifecycleStandard() (*asset, error) {
	bytes, err := toscaInterfacesNodeLifecycleStandardBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.interfaces.node.lifecycle.Standard", size: 122, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaInterfacesRelationshipConfigure = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8a\xc1\x0d\x84\x20\x14\x44\x5f\x2b\xdb\xc0\xdf\x06\x36\x7b\xb1\x12\x43\x40\x89\x08\x46\xf0\x60\xf3\xea\x84\xb3\xa7\x99\x37\xf3\x3e\xbf\x7a\xae\x29\xe6\xe5\x7f\x5f\x86\xf1\x25\x92\x69\x78\x76\x02\x23\x4e\xad\x6a\x6d\x14\xa5\xd3\x62\xaf\x86\x89\x3c\x49\xdc\xf4\x17\x19\x95\x59\x6d\xd3\x33\x74\x0e\xa2\x89\xa3\x7b\xf0\x04\x00\x00\xff\xff\x3e\xd4\x39\xae\x78\x00\x00\x00")

func toscaInterfacesRelationshipConfigureBytes() ([]byte, error) {
	return bindataRead(
		_toscaInterfacesRelationshipConfigure,
		"tosca.interfaces.relationship.Configure",
	)
}

func toscaInterfacesRelationshipConfigure() (*asset, error) {
	bytes, err := toscaInterfacesRelationshipConfigureBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.interfaces.relationship.Configure", size: 120, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesBlockstorage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x27\x86\x1c\x20\x2f\x99\x21\x9b\x21\x18\xac\xa6\x08\xa8\x22\x1d\x28\xc7\xc0\x00\x08\x00\x00\xff\xff\x28\x54\xed\xf3\x50\x00\x00\x00")

func toscaNodesBlockstorageBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesBlockstorage,
		"tosca.nodes.BlockStorage",
	)
}

func toscaNodesBlockstorage() (*asset, error) {
	bytes, err := toscaNodesBlockstorageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.BlockStorage", size: 80, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesCompute = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x67\x20\x3b\x97\xa1\x80\xa1\x14\xa8\x22\x95\x81\x81\x01\x10\x00\x00\xff\xff\xdd\xe0\x31\xce\x46\x00\x00\x00")

func toscaNodesComputeBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesCompute,
		"tosca.nodes.Compute",
	)
}

func toscaNodesCompute() (*asset, error) {
	bytes, err := toscaNodesComputeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Compute", size: 70, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesContainerApplication = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x8a\xc1\x09\x80\x30\x14\x43\xdf\x2a\x2e\x50\x17\x10\x41\x9c\xa4\x68\x0f\xc5\xfa\x15\x7f\x2f\x2e\xaf\xa6\x27\xc9\x21\x8f\x97\x74\x83\xdf\x7b\xc9\xb6\x8d\xef\x13\x08\xf4\x18\x07\x2b\x09\x17\x57\xb1\xb3\x10\xb5\xfc\x3e\x30\x8b\x4d\x6b\x24\xab\x13\x97\xdc\xc4\xa9\x14\x99\xf6\xaf\xea\xf6\x81\x2f\x00\x00\xff\xff\x91\xb9\x35\x84\x62\x00\x00\x00")

func toscaNodesContainerApplicationBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesContainerApplication,
		"tosca.nodes.Container.Application",
	)
}

func toscaNodesContainerApplication() (*asset, error) {
	bytes, err := toscaNodesContainerApplicationBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Container.Application", size: 98, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesContainerRuntime = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x67\x20\x3b\x0f\x28\x9b\xc8\x90\x09\xa4\x53\x19\x8a\x80\x62\x41\x0c\xa5\x60\xb1\x4c\x86\x5c\xa0\x08\x03\x03\x20\x00\x00\xff\xff\x07\x29\x87\x71\x5a\x00\x00\x00")

func toscaNodesContainerRuntimeBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesContainerRuntime,
		"tosca.nodes.Container.Runtime",
	)
}

func toscaNodesContainerRuntime() (*asset, error) {
	bytes, err := toscaNodesContainerRuntimeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Container.Runtime", size: 90, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesDbms = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x17\x06\x27\x06\x5f\x86\x60\x06\x06\x06\x40\x00\x00\x00\xff\xff\x58\x8f\xd0\xbb\x40\x00\x00\x00")

func toscaNodesDbmsBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesDbms,
		"tosca.nodes.DBMS",
	)
}

func toscaNodesDbms() (*asset, error) {
	bytes, err := toscaNodesDbmsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.DBMS", size: 64, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesDatabase = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x17\xa0\x48\x09\x10\x27\x01\x71\x31\x50\x8c\x81\x01\x10\x00\x00\xff\xff\xfd\x58\xee\x63\x48\x00\x00\x00")

func toscaNodesDatabaseBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesDatabase,
		"tosca.nodes.Database",
	)
}

func toscaNodesDatabase() (*asset, error) {
	bytes, err := toscaNodesDatabaseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Database", size: 72, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesLoadbalancer = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x1f\x20\x3b\x11\xc8\x73\x02\x92\x39\x40\x9c\x07\x54\x93\xca\x50\xc4\xc0\xc0\x00\x08\x00\x00\xff\xff\x31\x4e\x64\x7b\x50\x00\x00\x00")

func toscaNodesLoadbalancerBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesLoadbalancer,
		"tosca.nodes.LoadBalancer",
	)
}

func toscaNodesLoadbalancer() (*asset, error) {
	bytes, err := toscaNodesLoadbalancerBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.LoadBalancer", size: 80, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesObjectstorage = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x06\x7f\x86\x24\x86\x2c\x20\x3b\x19\xa8\x22\x18\xac\xaa\x08\xa8\x26\x1d\x28\xc2\xc0\x00\x08\x00\x00\xff\xff\x0a\xf3\xe4\xb1\x52\x00\x00\x00")

func toscaNodesObjectstorageBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesObjectstorage,
		"tosca.nodes.ObjectStorage",
	)
}

func toscaNodesObjectstorage() (*asset, error) {
	bytes, err := toscaNodesObjectstorageBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.ObjectStorage", size: 82, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x86\x20\x20\x3b\x1f\x28\xcb\xc0\x00\x08\x00\x00\xff\xff\xca\x3a\x92\x84\x40\x00\x00\x00")

func toscaNodesRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesRoot,
		"tosca.nodes.Root",
	)
}

func toscaNodesRoot() (*asset, error) {
	bytes, err := toscaNodesRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.Root", size: 64, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesSoftwarecomponent = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x89\xcb\x0d\x40\x00\x10\x05\xa7\x15\x0d\xac\x06\xc4\x45\x09\x2a\x10\x9f\x44\xd8\x25\x56\x22\x9a\xc7\xbb\xb9\xbc\xcc\x9b\x29\xaa\xbc\x7d\x9d\x63\xa9\xdf\xc7\x30\x4a\x82\x8d\x81\x91\x14\x9f\xe2\xa4\xa7\x53\xf9\xbd\xd1\x8a\x27\xd5\x4b\xe5\x90\x6b\xf4\x9d\x5d\x1b\x7a\xa1\x02\x5f\x00\x00\x00\xff\xff\xf9\x10\x1c\x5f\x5a\x00\x00\x00")

func toscaNodesSoftwarecomponentBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesSoftwarecomponent,
		"tosca.nodes.SoftwareComponent",
	)
}

func toscaNodesSoftwarecomponent() (*asset, error) {
	bytes, err := toscaNodesSoftwarecomponentBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.SoftwareComponent", size: 90, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesWebapplication = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x86\x70\x20\x9d\xc4\xe0\xc8\x50\x00\x84\x39\x0c\x99\x60\x15\x25\x40\x3a\x1f\xa8\x8a\x81\x01\x10\x00\x00\xff\xff\xc8\x11\x61\x5a\x54\x00\x00\x00")

func toscaNodesWebapplicationBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesWebapplication,
		"tosca.nodes.WebApplication",
	)
}

func toscaNodesWebapplication() (*asset, error) {
	bytes, err := toscaNodesWebapplicationBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.WebApplication", size: 84, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaNodesWebserver = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\x21\x8f\x21\x9f\x21\x85\x21\x95\xa1\x18\xc8\x2e\x01\xb2\x8b\x19\x92\x19\x12\x81\x32\x08\x71\x3d\x86\x70\x20\x9d\xc4\x10\x0c\x24\x8b\x18\xca\xc0\x24\x03\x03\x20\x00\x00\xff\xff\xba\x64\x65\x0f\x4a\x00\x00\x00")

func toscaNodesWebserverBytes() ([]byte, error) {
	return bindataRead(
		_toscaNodesWebserver,
		"tosca.nodes.WebServer",
	)
}

func toscaNodesWebserver() (*asset, error) {
	bytes, err := toscaNodesWebserverBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.nodes.WebServer", size: 74, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsAttachesto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\xc1\x11\x28\x5a\x02\x94\x4b\x06\x8a\xa5\x02\x45\x42\x80\x2a\x18\x18\x00\x01\x00\x00\xff\xff\xdf\x40\x89\xaa\x6c\x00\x00\x00")

func toscaRelationshipsAttachestoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsAttachesto,
		"tosca.relationships.AttachesTo",
	)
}

func toscaRelationshipsAttachesto() (*asset, error) {
	bytes, err := toscaRelationshipsAttachestoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.AttachesTo", size: 108, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsConnectsto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\xc1\x19\x2c\x92\x07\x54\x91\x0c\x94\x2f\x66\x08\x01\xf2\x19\x18\x00\x01\x00\x00\xff\xff\xc1\x42\x9d\xa5\x6c\x00\x00\x00")

func toscaRelationshipsConnectstoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsConnectsto,
		"tosca.relationships.ConnectsTo",
	)
}

func toscaRelationshipsConnectsto() (*asset, error) {
	bytes, err := toscaRelationshipsConnectstoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.ConnectsTo", size: 108, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsDependson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\xc1\x05\x28\x57\x00\xc4\x79\x0c\x29\x40\xbe\x3f\x90\x66\x60\x00\x04\x00\x00\xff\xff\xb5\x43\x0c\xad\x6a\x00\x00\x00")

func toscaRelationshipsDependsonBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsDependson,
		"tosca.relationships.DependsOn",
	)
}

func toscaRelationshipsDependson() (*asset, error) {
	bytes, err := toscaRelationshipsDependsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.DependsOn", size: 106, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsHostedon = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\xc1\x03\xac\xae\x04\xa8\x22\x85\xc1\x1f\x28\xc7\xc0\x00\x08\x00\x00\xff\xff\x02\x09\x7f\xae\x68\x00\x00\x00")

func toscaRelationshipsHostedonBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsHostedon,
		"tosca.relationships.HostedOn",
	)
}

func toscaRelationshipsHostedon() (*asset, error) {
	bytes, err := toscaRelationshipsHostedonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.HostedOn", size: 104, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsRoot = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\x21\x08\x28\x92\x0f\x94\x61\x60\x00\x04\x00\x00\xff\xff\xf8\x54\xcd\x92\x60\x00\x00\x00")

func toscaRelationshipsRootBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsRoot,
		"tosca.relationships.Root",
	)
}

func toscaRelationshipsRoot() (*asset, error) {
	bytes, err := toscaRelationshipsRootBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.Root", size: 96, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _toscaRelationshipsRoutesto = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\xb4\x29\xae\xcc\xcd\xc9\xcc\xcb\xb6\xfb\xff\x4f\x8f\x41\x8f\x41\x9f\xa1\x88\x21\x95\x21\x87\x21\x91\xa1\x84\x21\x93\x21\x9f\x21\x8f\xa1\x98\x21\x03\xc8\x2a\x00\xd2\xfa\x40\xb1\x7c\x20\x9d\x0c\x94\xd5\xc3\xa3\x4e\x8f\x21\x08\x28\x52\x0a\x94\x49\x05\xf2\x42\x80\x6c\x06\x06\x40\x00\x00\x00\xff\xff\x2c\x76\x48\xcd\x68\x00\x00\x00")

func toscaRelationshipsRoutestoBytes() ([]byte, error) {
	return bindataRead(
		_toscaRelationshipsRoutesto,
		"tosca.relationships.RoutesTo",
	)
}

func toscaRelationshipsRoutesto() (*asset, error) {
	bytes, err := toscaRelationshipsRoutestoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tosca.relationships.RoutesTo", size: 104, mode: os.FileMode(438), modTime: time.Unix(1434111887, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tosca.capabilities.Attachement": toscaCapabilitiesAttachement,
	"tosca.capabilities.Container": toscaCapabilitiesContainer,
	"tosca.capabilities.Endpoint": toscaCapabilitiesEndpoint,
	"tosca.capabilities.Endpoint.Admin": toscaCapabilitiesEndpointAdmin,
	"tosca.capabilities.Endpoint.Database": toscaCapabilitiesEndpointDatabase,
	"tosca.capabilities.Endpoint.Public": toscaCapabilitiesEndpointPublic,
	"tosca.capabilities.Network.Bindable": toscaCapabilitiesNetworkBindable,
	"tosca.capabilities.Node": toscaCapabilitiesNode,
	"tosca.capabilities.OperatingSystem": toscaCapabilitiesOperatingsystem,
	"tosca.capabilities.Root": toscaCapabilitiesRoot,
	"tosca.capabilities.Scalable": toscaCapabilitiesScalable,
	"tosca.interfaces.node.lifecycle.Standard": toscaInterfacesNodeLifecycleStandard,
	"tosca.interfaces.relationship.Configure": toscaInterfacesRelationshipConfigure,
	"tosca.nodes.BlockStorage": toscaNodesBlockstorage,
	"tosca.nodes.Compute": toscaNodesCompute,
	"tosca.nodes.Container.Application": toscaNodesContainerApplication,
	"tosca.nodes.Container.Runtime": toscaNodesContainerRuntime,
	"tosca.nodes.DBMS": toscaNodesDbms,
	"tosca.nodes.Database": toscaNodesDatabase,
	"tosca.nodes.LoadBalancer": toscaNodesLoadbalancer,
	"tosca.nodes.ObjectStorage": toscaNodesObjectstorage,
	"tosca.nodes.Root": toscaNodesRoot,
	"tosca.nodes.SoftwareComponent": toscaNodesSoftwarecomponent,
	"tosca.nodes.WebApplication": toscaNodesWebapplication,
	"tosca.nodes.WebServer": toscaNodesWebserver,
	"tosca.relationships.AttachesTo": toscaRelationshipsAttachesto,
	"tosca.relationships.ConnectsTo": toscaRelationshipsConnectsto,
	"tosca.relationships.DependsOn": toscaRelationshipsDependson,
	"tosca.relationships.HostedOn": toscaRelationshipsHostedon,
	"tosca.relationships.Root": toscaRelationshipsRoot,
	"tosca.relationships.RoutesTo": toscaRelationshipsRoutesto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tosca.capabilities.Attachement": &bintree{toscaCapabilitiesAttachement, map[string]*bintree{
	}},
	"tosca.capabilities.Container": &bintree{toscaCapabilitiesContainer, map[string]*bintree{
	}},
	"tosca.capabilities.Endpoint": &bintree{toscaCapabilitiesEndpoint, map[string]*bintree{
	}},
	"tosca.capabilities.Endpoint.Admin": &bintree{toscaCapabilitiesEndpointAdmin, map[string]*bintree{
	}},
	"tosca.capabilities.Endpoint.Database": &bintree{toscaCapabilitiesEndpointDatabase, map[string]*bintree{
	}},
	"tosca.capabilities.Endpoint.Public": &bintree{toscaCapabilitiesEndpointPublic, map[string]*bintree{
	}},
	"tosca.capabilities.Network.Bindable": &bintree{toscaCapabilitiesNetworkBindable, map[string]*bintree{
	}},
	"tosca.capabilities.Node": &bintree{toscaCapabilitiesNode, map[string]*bintree{
	}},
	"tosca.capabilities.OperatingSystem": &bintree{toscaCapabilitiesOperatingsystem, map[string]*bintree{
	}},
	"tosca.capabilities.Root": &bintree{toscaCapabilitiesRoot, map[string]*bintree{
	}},
	"tosca.capabilities.Scalable": &bintree{toscaCapabilitiesScalable, map[string]*bintree{
	}},
	"tosca.interfaces.node.lifecycle.Standard": &bintree{toscaInterfacesNodeLifecycleStandard, map[string]*bintree{
	}},
	"tosca.interfaces.relationship.Configure": &bintree{toscaInterfacesRelationshipConfigure, map[string]*bintree{
	}},
	"tosca.nodes.BlockStorage": &bintree{toscaNodesBlockstorage, map[string]*bintree{
	}},
	"tosca.nodes.Compute": &bintree{toscaNodesCompute, map[string]*bintree{
	}},
	"tosca.nodes.Container.Application": &bintree{toscaNodesContainerApplication, map[string]*bintree{
	}},
	"tosca.nodes.Container.Runtime": &bintree{toscaNodesContainerRuntime, map[string]*bintree{
	}},
	"tosca.nodes.DBMS": &bintree{toscaNodesDbms, map[string]*bintree{
	}},
	"tosca.nodes.Database": &bintree{toscaNodesDatabase, map[string]*bintree{
	}},
	"tosca.nodes.LoadBalancer": &bintree{toscaNodesLoadbalancer, map[string]*bintree{
	}},
	"tosca.nodes.ObjectStorage": &bintree{toscaNodesObjectstorage, map[string]*bintree{
	}},
	"tosca.nodes.Root": &bintree{toscaNodesRoot, map[string]*bintree{
	}},
	"tosca.nodes.SoftwareComponent": &bintree{toscaNodesSoftwarecomponent, map[string]*bintree{
	}},
	"tosca.nodes.WebApplication": &bintree{toscaNodesWebapplication, map[string]*bintree{
	}},
	"tosca.nodes.WebServer": &bintree{toscaNodesWebserver, map[string]*bintree{
	}},
	"tosca.relationships.AttachesTo": &bintree{toscaRelationshipsAttachesto, map[string]*bintree{
	}},
	"tosca.relationships.ConnectsTo": &bintree{toscaRelationshipsConnectsto, map[string]*bintree{
	}},
	"tosca.relationships.DependsOn": &bintree{toscaRelationshipsDependson, map[string]*bintree{
	}},
	"tosca.relationships.HostedOn": &bintree{toscaRelationshipsHostedon, map[string]*bintree{
	}},
	"tosca.relationships.Root": &bintree{toscaRelationshipsRoot, map[string]*bintree{
	}},
	"tosca.relationships.RoutesTo": &bintree{toscaRelationshipsRoutesto, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

