// Code generated by go-bindata.
// sources:
// NormativeTypes/capability_types
// NormativeTypes/interface_types
// NormativeTypes/node_types
// NormativeTypes/relationship_types
// DO NOT EDIT!

package toscalib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _capability_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\xcd\x6e\xdb\x46\x10\xbe\xfb\x29\x06\xe8\x35\x11\xec\xab\x0e\x05\x6c\x39\x68\x0d\xb4\x89\x10\xb9\xbd\x14\xc5\x62\xb4\x1c\x49\x8b\x2c\x77\xd9\xd9\xa1\x13\xe5\xe9\x3b\xa4\x96\x0c\x23\x31\x92\x2c\x1b\xc8\x45\xa0\xe6\x7f\xbf\xf9\x95\x98\x2c\x9a\x82\x56\x2e\x38\x71\x31\x24\xf3\x44\x9c\xf4\x63\x0a\x3b\x56\x72\x65\xe5\xc9\x6c\xb1\xf4\xe6\xc6\x5c\x9b\xeb\xab\x2b\x8b\x15\x2e\x9d\x77\xb2\x35\xb2\xad\x28\x4d\xaf\x60\x27\x3c\xe9\x39\x8e\xd2\xe4\x56\x04\xed\xa6\xa4\x20\x8d\x00\x40\x41\xec\x9e\xa8\x30\x2b\x8e\xe5\x74\x4c\xe1\x63\x8c\x32\x6e\x6a\x16\x83\xa0\x0b\xc4\xcf\xb3\x04\x50\x71\xac\x88\x1b\xda\x4e\x13\x20\xd4\xa5\xb1\x55\xdd\xff\x57\x7f\xfa\x86\x29\xb8\x20\xb4\x26\xee\xa9\x4c\xff\xd5\x8e\xa9\x98\xc2\x0a\x7d\xa2\x9e\x6e\x15\x23\x61\x0d\x46\x06\x26\x00\xde\xc2\x9a\x09\x85\xd8\x44\x36\xaa\x8a\x7e\x0a\x37\x99\xaf\xee\x34\x54\x25\x52\xb0\xdb\x7d\xbf\x1a\xbb\x47\x7e\x5b\x2b\xfc\x93\x5e\xe8\x35\xa3\xb8\x9e\xdc\xc0\x6f\xbf\x7f\xcd\x52\x85\x4b\x9f\x34\xa7\x5f\xe9\x58\x1c\x0d\xff\x55\x43\x80\x3f\xef\xb2\x48\x49\xe5\xcf\x72\x3f\x52\x27\xef\x42\x51\x45\xf7\xdc\x02\x1d\x2b\x2b\xa5\x48\xb4\xd1\x1f\xbc\x4b\xd8\x85\x75\x4f\xd4\x46\xc3\xda\x8b\x5a\xb7\x55\xa7\x19\x59\xf6\xb5\xe6\x4a\xbb\xa7\xd5\x09\x10\x12\xd9\x9a\x0f\x90\x5c\xc6\xe8\x09\xc3\xa1\xcb\xa1\x6a\xcd\xde\x54\x28\x9b\x13\xe1\x8e\xfb\x6d\x22\x36\x01\xcb\xc3\x24\x9e\xa3\x1d\x48\x3e\x47\xfe\x74\xb9\x81\xc1\x93\xe6\x1f\x1f\xfe\xbe\x7d\x7c\x97\x19\xed\x08\x43\x89\x7c\x6e\x12\x52\xac\xd9\x9e\x51\x52\x4f\xe8\x5d\x61\xf4\xb7\xd6\x84\xc3\x3f\x59\xef\x0d\x08\xf2\x9a\xe4\x0d\x54\x44\x0c\xff\x0e\xd0\x39\x98\x2e\x25\x56\x97\x57\x74\xe9\x82\xf1\x14\xd6\x9a\xae\x7e\xa6\x00\xe8\x5c\xe5\xad\x49\x76\x43\x25\x0e\xe5\xbf\x55\xd0\xa2\x22\xdb\x32\x50\x14\x80\x65\x2d\xdf\xca\xd5\x55\x06\x8b\x82\x29\x1d\x44\xda\x63\x75\xa4\x5d\x26\xb7\x85\xc6\x74\x66\xd3\x74\x4a\xad\xf4\x2f\x30\xdb\x60\x58\x13\x74\xd4\x5c\xc4\x9a\xbb\xc2\xd9\x26\x77\x6a\x02\x84\x6b\x82\xc6\x20\x38\x49\x5d\xba\x20\xae\x06\x80\x1d\x76\x60\xee\x86\x56\xf9\x44\xf8\xf7\x28\xb8\xc4\x34\x28\xbf\xe7\xbc\xe2\x98\xe5\x79\xbd\xf4\xce\x5e\x82\xcc\xe1\x83\x7a\xac\x64\x43\x3d\x08\xc3\xee\x69\xa0\xaa\xd3\x8e\xbf\x72\x9c\x04\xaa\xd6\x7d\x27\x04\xab\x58\x87\x62\xac\xed\x60\xfe\xd7\xdd\x1f\x0f\xb3\xcc\x5a\xf9\x88\xa2\x49\x1f\xc2\x91\x2c\xbb\x4a\xda\x3b\xe0\xd7\x41\x71\xe5\x34\x51\x52\xa7\x28\xad\xe7\xec\x33\x97\x13\xa4\x4d\xac\x7d\x01\x4b\x02\xf4\x3e\x36\xb2\xc5\x2e\x95\xa8\x9d\x11\x7d\x9b\xc5\xec\x0f\x1e\xe6\xd9\x0e\x6a\x05\x60\x4a\xd1\xba\x56\xfe\xb3\x93\x4d\x6b\x3b\x07\x3d\xb9\x64\xc4\x69\x45\x08\x8a\x2e\x7a\xa0\x2f\x8a\xac\x6b\x0e\x11\xf4\xdd\x1a\xd4\x43\xe7\xfb\x01\xf4\xdd\x93\x1f\xd5\x77\x6c\xbf\xd1\x43\x07\x35\xd3\xda\x25\xdd\x2c\xbb\xf0\xee\xdf\x2f\x9e\x35\xbc\x94\x72\x2a\xb0\x91\x12\xe9\x00\xb8\x53\xe0\x71\xe9\xe9\xcc\xca\x7a\x1f\x8b\x1f\xf4\x40\xc3\x79\xf1\x39\xf6\x41\xc3\x6e\x33\xb8\xd8\x2a\x20\xe5\xcb\xb7\x27\xb2\xdd\x38\x21\x2b\x23\xfb\xec\xac\x9d\xd0\x8a\x5e\xa2\xa8\xf7\xd0\x6e\x36\x36\x79\xbf\xc4\x40\x77\x2e\xef\xe9\x66\xf2\x11\xe5\x1f\x20\xd4\x81\xb9\x57\x8d\x8f\x1f\x16\xb3\x5b\x60\x15\x80\x59\x7f\x7e\xc3\xa3\xfa\x6a\xfa\x0c\xa2\x76\x0b\x67\xa1\x66\xb2\xed\x0b\xa5\x9c\x9e\xb6\x15\xc7\x9d\x2f\x9a\x0b\xec\xfc\x12\x3b\x92\xcd\x66\x5f\x39\xdd\x65\x18\x2c\x9d\xbc\xb3\xfb\xde\xed\x36\x5b\x89\x5f\x5e\xa0\x9d\x09\xa7\x2d\xfc\x1f\x00\x00\xff\xff\xf3\x70\x74\x0b\xf9\x0c\x00\x00")

func capability_typesBytes() ([]byte, error) {
	return bindataRead(
		_capability_types,
		"capability_types",
	)
}

func capability_types() (*asset, error) {
	bytes, err := capability_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "capability_types", size: 3321, mode: os.FileMode(493), modTime: time.Unix(1451506209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _interface_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x93\x41\xce\xdb\x20\x10\x85\xf7\x39\xc5\x5c\xa0\xe8\xef\xf6\xdf\xf6\x00\x5d\xf4\x00\x68\x02\x63\x7b\x24\x1b\x10\x4c\xfc\xcb\xb7\x2f\x86\xd8\xb5\x13\x57\x45\xdd\x91\xcc\x9b\xef\xbd\x3c\x88\xf8\x64\x50\x5b\xea\xd8\xb1\xb0\x77\x49\xcf\x14\x53\x3e\x7c\x42\x1d\x25\x9e\xc2\x48\x7a\xc1\x69\xd4\xdf\xf5\x87\xfe\xb8\xdd\xd8\x09\xc5\x0e\x0d\x69\x59\x02\xa5\xcf\x1b\x54\xad\xda\x07\x49\x39\x6f\x49\x8d\xdc\x91\x59\xcc\x48\xea\x97\xa0\xb3\x18\xed\xaa\x05\x30\x91\x50\xa8\x9e\x01\x2c\x25\x13\x39\x48\x31\xdd\x84\xb0\xef\x3e\xd5\xe0\x03\x45\x5c\x45\xaa\x32\xbc\xeb\xb8\x7f\xc4\x76\xcc\xb6\xf0\x4a\x4a\x82\x51\x5a\x29\x45\xfc\x4e\xf0\xa1\x1d\xe0\xc3\xeb\xbe\xa5\x91\xda\xfb\xa8\xea\x33\xe3\xad\xff\x48\x63\x19\xa6\x81\x83\xfa\x71\xee\x2a\x44\xd2\x7b\x1b\x3a\xf9\x47\x34\xd7\xe6\x3f\x37\x8b\xcc\x5f\xb7\xbe\xfd\xe9\x50\x86\xfc\x53\xca\x26\x90\xb3\xc1\x67\x6b\x75\x01\xcf\x6d\xf5\x74\x5d\xee\x3f\xe0\x75\xf3\x15\xee\x93\xfc\x4f\xf4\xbc\xd6\x94\xfd\x8c\x6f\x0e\xff\x8e\xbf\x4c\x8f\xd6\x36\x33\x9d\x17\xee\x96\x63\xd4\xf5\x1f\x05\xbe\x03\xdc\xe0\xe5\x8b\x3b\xb1\xeb\x57\x32\x59\x98\x19\xf3\xf4\x74\xf3\xbb\x6f\x6b\x55\x07\xdf\xa3\x4d\xf1\x3d\x06\xf9\x1a\xd8\x0c\xc0\x29\x7f\xfa\x02\x9c\x91\x47\xbc\xe7\xb7\xf9\xb7\x08\x95\xa5\xcd\x80\xae\x27\xdb\x1c\xe3\xe9\x98\xfc\x44\xf9\x89\xac\x2f\x5e\x16\xf0\x11\x50\x24\xf2\xfd\x21\x25\xd8\x21\xeb\x93\x5f\xf0\x91\x26\x3f\xb7\x5f\x62\x95\x9f\xdb\x55\x70\xfb\x1d\x00\x00\xff\xff\x07\x7e\xc6\x80\x20\x05\x00\x00")

func interface_typesBytes() ([]byte, error) {
	return bindataRead(
		_interface_types,
		"interface_types",
	)
}

func interface_types() (*asset, error) {
	bytes, err := interface_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "interface_types", size: 1312, mode: os.FileMode(493), modTime: time.Unix(1451506174, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _node_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xcd\x6e\xe3\x36\x10\xbe\xe7\x29\x08\xec\xa5\x05\x36\x42\x16\xe8\xc9\xb7\x38\xde\xb6\x0b\x34\x71\x10\x67\xd1\xc3\x22\x10\x68\x92\xb2\xd9\xa5\x48\x95\xa4\x92\xb8\xa7\xbe\x46\x5f\xaf\x4f\xd2\xa1\x24\xd2\xb4\x24\x5b\xb2\xf3\x83\xea\x12\x47\x9a\x19\x72\x66\xbe\x6f\x66\x48\xab\x0c\xc1\x29\x65\x19\x97\xdc\x72\x25\x4d\xfa\xc8\xb4\x81\x1f\x13\x54\x7f\x32\x3c\x2f\x04\x4b\x37\x38\x17\xe9\xa7\xf4\x22\xbd\x38\x3b\x93\x8a\xb2\xd4\x6e\x0a\x66\x26\x67\xa8\x16\x4b\xdc\x3b\x93\x4c\x85\x22\xdf\x17\x56\x69\xbc\x62\xee\x1b\x42\x94\x69\xfe\xc8\x68\x9a\x69\x95\x4f\x76\x64\xef\x94\xb2\x95\x48\xa1\x55\xc1\xb4\xe5\xb5\x39\xf7\x18\xfe\x17\xf3\xbf\x61\x01\x58\x69\x82\x40\x51\x60\x7d\x5e\xc2\x36\x13\xf7\x3d\x7c\x26\xb0\x69\xab\x31\x97\xd6\x6c\x75\x10\x3a\x47\x2b\xcd\xb0\x65\x3a\x55\x3a\x65\x7f\x96\x58\x4c\xd0\x27\x74\x3d\x6d\x44\x1e\x95\x28\x73\x96\x72\xda\x59\xc7\x6a\x2e\x57\xe1\xa5\x06\x55\xae\x19\x9d\xa0\x0c\x0b\xe3\x57\x35\x12\x17\x66\xad\xec\x69\xfa\x04\x17\x78\xc9\x05\x8f\x5d\xc6\xd6\x62\xb2\xce\x99\xb4\x6d\x83\x75\xcc\x62\x9d\xe4\x32\x08\xb7\xe2\x7f\xa5\xf2\xa2\xb4\xe3\x43\x0f\xab\x6a\xbe\x04\x8d\xb0\x8f\x02\x74\x20\x6a\x29\xa6\x54\x33\x63\x0e\x7a\x57\x94\x4b\xc1\xc9\x28\x51\xc9\xec\x93\xd2\xdf\x3b\x42\x39\x2e\xc2\x1b\x70\x47\x6f\x52\x43\xd6\x2c\xc7\x71\x26\xe3\x30\x50\x6c\x71\x85\xbc\xa4\xb1\x98\xdc\xd4\x7f\xbf\xc8\x4c\xf9\x6d\x29\x6d\xdf\x60\xa1\x5b\x30\x1b\x56\x69\xd2\xea\x52\x10\x96\x3a\x47\x80\x7e\x2c\x52\x13\xe3\xbf\x7e\x42\xf6\x36\xc3\xf9\xf4\x8f\x4b\xd5\x64\x2f\xbb\x22\x41\xcd\x04\xae\xa8\xbb\xe6\x85\x57\x88\xdf\x79\xfb\xcc\xdc\xab\x48\x4d\x11\x52\x6a\xcd\x24\x81\xe4\xa3\x6f\x17\x1f\xd1\xd7\x9b\xe9\xfc\xeb\xcd\xec\xf3\xec\x01\xed\x85\xe9\x5a\x99\x31\x00\xbd\x52\xd2\x02\x23\x99\x0e\xa2\x8f\x58\x70\x9a\x1a\x55\x6a\xe2\x6b\x07\xfa\x16\x3b\xb7\x50\x99\x7d\xc2\x9a\x39\x08\x2b\x09\xa1\x78\x38\xf3\xd9\xa2\x85\xe2\xa3\x78\xf1\xb9\x11\x4d\x2e\x69\xce\x65\x23\xaf\x3a\x58\xe8\xd1\x9c\x43\x05\x82\x80\xc9\xd5\x62\x63\x2c\xcb\x3d\xcd\x5d\xcd\x59\x8a\x4e\x2d\xea\x31\xb0\x68\x44\x1b\xc9\x25\x97\x14\xac\x8d\x50\xf4\xf0\x9a\x82\x46\x63\x60\x97\xd1\x4d\x24\x93\xcb\xa2\x00\xb6\x55\x59\x1d\xcd\xef\x7e\x98\xee\x26\x71\x10\x9d\xdd\x64\xf6\x81\xb3\x4f\x6a\x18\x99\xbf\xc2\x56\x18\x9d\xcb\xbd\x5e\xdf\x95\xd2\xf2\x7c\xb0\xa2\x75\xd0\xf3\xda\x08\x3e\x0d\x0a\xf1\x16\x67\x50\x51\x96\xd8\xbc\xa4\x2f\x4a\x9c\x77\xfb\xe2\x6e\xbf\x01\x0b\x44\xf3\xc2\xd6\x1d\x7c\xcd\xa0\x26\xad\x00\x35\xa2\xd2\x45\x2a\xab\xde\xd1\x66\x2b\x51\xc1\x6c\x9b\x05\x16\xb1\x55\x94\xcc\x8e\x5d\xa7\x54\xfd\x28\x25\xf8\x22\x36\xb0\x89\x60\x17\x19\xa6\x1f\x39\x61\xe8\x89\x0b\x81\x04\x87\x1c\x4b\xf0\x11\x65\x4a\x57\x32\x8d\xd5\x12\xc4\x8e\x75\x47\x55\xbf\xc1\x1f\xa7\x8c\x30\x21\x0a\x00\x52\x3b\xe7\xac\xcf\xa6\x08\x3b\xee\x73\x37\x12\x38\xc9\x81\x46\x5e\x60\x63\x80\x7e\x43\x5d\x7c\xff\x36\xbc\x81\x6a\x75\xf7\x05\x76\x10\x6f\xed\xe0\xfa\xef\x48\xcf\xd9\xf4\x7a\x71\x2a\x33\xfb\x89\xe4\x93\x9d\x9e\x52\xa0\x67\x5b\x04\xb6\x77\x79\x1a\xd5\xbb\x64\xd1\xc0\xa3\x74\x64\x7e\xfb\xc1\x71\x28\xef\xce\x7a\x5f\xf2\xaf\x17\x1e\xfc\x47\x90\x6b\xf4\xf2\x81\x74\xf1\x42\xfb\x58\x86\xb0\xa4\x95\x69\x66\xac\xe9\xa6\x11\xfe\x7f\x93\xa6\xde\x5b\xf4\xd0\x43\x2b\xd3\xbf\x29\x4c\xa7\x50\x27\x61\xfc\xd0\x2f\xa8\x88\x1f\xd0\xfd\x74\xe6\x47\x68\xb1\x52\x9a\xdb\x75\x7e\x62\xb2\x0d\x4c\x7c\x25\x78\xc0\x9e\x61\x11\xee\x48\x89\xc5\x5e\xf4\x13\xc1\xc7\xcd\xea\x01\xf2\xb7\xd5\xb4\x1c\x14\x06\xc7\xaf\x5e\x00\xfc\x2c\x54\x35\xa6\xa0\x1f\xbe\xdc\xfe\xd8\x6c\xe2\xdf\xbf\xff\x31\x48\xc9\x1a\x20\xd5\x22\x7e\xdc\x86\x9d\x4b\x77\x3e\x92\x8c\x00\x6c\x0e\x4d\xae\xb8\x3d\x5c\x34\x5e\x1e\x2e\x3d\xde\xb7\xa3\x0a\xcb\x9d\x72\xe7\x8d\xe3\x46\xd1\x9e\x68\x5c\xd5\x6e\x71\x55\x61\x1e\x0a\x01\x02\xd8\xe7\x4a\xbb\x8e\x87\x29\x5a\xd6\xd8\xa2\xb1\x67\xa6\x85\xc1\xf9\xf2\x0f\xb0\x10\x1d\x57\xc7\xe1\xb0\x07\x8a\xad\xfe\xbc\x0f\x7f\x7e\x96\x68\x8e\xb7\x6d\xb1\xee\x09\x37\x48\xb4\x0e\xb9\x51\x50\xfa\xce\xb9\x17\xe8\x97\xe9\x56\x2a\xc7\xcf\xef\xba\x62\x9b\x2e\xde\xeb\x3a\xce\x3b\xed\x62\x3c\x7d\x5a\xa9\x73\xa9\xf0\x65\x23\x02\xc5\x3d\x50\xe0\x7e\xbe\xb8\xba\x44\x37\x20\x86\xee\xc1\x2a\x94\x05\x81\x14\x70\x43\x37\x5f\xaa\x72\x14\x3e\x9b\x26\xdf\xc8\xa5\xbb\x32\xd8\x3d\x13\xd7\x17\x21\x03\x47\xfd\x5a\x68\x70\x42\x73\x45\xe6\x90\x44\x5f\xad\xc9\x20\xda\xa5\x1e\x33\x7a\x3a\xb7\x0e\xb0\x9c\xb2\x02\xa2\x0f\x3c\xdb\x1c\x41\xf2\x60\xb3\x7e\xba\xa3\x45\x28\xcf\xad\x67\xb8\x14\xcc\xaa\xfd\x98\xb9\xec\x53\xdf\x2d\x0a\x28\xae\x0a\xa8\x3e\x1b\xba\x36\xaa\x33\x4c\xb6\x91\x5a\x58\xe8\x79\xb8\xdb\xee\xeb\xc5\xb7\xf2\xd5\xce\x13\xc1\x33\x46\x36\x44\xb0\xc4\xeb\xb5\x50\xd6\x19\x35\x5e\xd4\xa9\xa8\xca\x81\x4e\xe7\xa6\x60\x84\x67\x50\xa4\x4d\x63\x1d\xa8\xd6\x98\x47\xcd\xdd\x9b\xef\x31\xfe\x7d\xb8\x93\x6b\xb9\xb5\x2b\xbe\xaf\xb3\x55\x03\x71\x4a\xe0\x3d\x98\xe2\xc0\xd6\xde\xe0\x6c\x2f\x3c\xae\x82\xe4\xff\x65\x78\x6d\xae\xb5\x4e\x9d\x5f\x63\x53\xbf\xb3\xe5\x29\x07\xe9\x6e\x3e\xa1\x3e\x5a\xf6\x6c\x53\x1d\x2a\xd1\x36\xa2\x03\x7c\x86\x96\x74\xca\xd0\xfc\xde\x51\x87\x50\x2d\x60\xc2\x7c\x9d\x13\x7d\x30\xf6\x7a\x27\xf9\x0f\xe8\xb6\xbe\xac\xfc\x88\x04\xde\x40\x7d\xff\x29\xdc\x15\x99\xe8\x8c\xb2\x0d\xf5\x88\x11\xa6\xe6\xca\x28\x8d\x9d\x4b\xa6\x37\x1c\xa1\x77\x11\x0b\xa5\xef\xbf\x00\x00\x00\xff\xff\x85\x54\xc1\x9e\xb3\x17\x00\x00")

func node_typesBytes() ([]byte, error) {
	return bindataRead(
		_node_types,
		"node_types",
	)
}

func node_types() (*asset, error) {
	bytes, err := node_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node_types", size: 6067, mode: os.FileMode(493), modTime: time.Unix(1451506214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _relationship_types = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x53\xcb\x6e\x1b\x31\x0c\xbc\xfb\x2b\xf8\x03\x35\x92\xeb\xde\x02\xb7\x40\x4f\x0d\x90\xfa\x56\x14\x02\x2d\x71\xbd\x04\xb4\x92\x4a\xd1\x06\xf2\xf7\xd5\x4a\x6b\x6f\xda\xd8\xee\x03\xf0\xcd\x5e\x0e\x67\x38\x23\x52\x63\xb6\x68\x1c\xf5\x1c\x58\x39\x86\x6c\x8e\x24\xb9\xfc\xe8\xa0\x95\x32\x8f\xc9\x93\x79\xc5\xd1\x9b\x47\xf3\x60\x1e\x56\x2b\x21\x8f\x15\x3b\x70\x32\xfa\x9a\x28\x77\x2b\x68\xf0\xf5\xdb\x5a\x5e\x3f\xa9\xa2\x1d\x28\x6f\xe3\x84\x00\x70\x24\x7c\x24\x67\x7a\x89\x63\x77\xb1\xe3\x25\x46\xad\xd0\x23\x7a\x76\x46\x51\xf6\xa4\xb3\x08\x7c\x9b\x5b\x2c\x26\xdc\xb1\x2f\x03\xd3\x49\x63\xa4\xa0\xf0\xbd\x76\x26\x89\x89\x64\xaa\x35\x51\x00\x1f\x6d\x95\x38\xfd\x2f\xc3\x16\xc2\x0e\xb2\x0a\x87\xfd\xf9\xa3\x2d\x43\xa8\x20\x07\xcd\x0b\x12\xe0\x03\x8c\x1c\x8c\xa7\xb0\xd7\xa1\x83\xc7\xb9\xe2\xe8\xc8\x96\xfe\xc0\x28\xf4\xe3\xc0\x42\xae\x83\x1e\x7d\xa6\x2b\x29\x6d\x62\x08\x64\xf5\xae\x29\x7d\x0a\x2e\x45\xbe\x91\x91\x2d\x63\x96\x0c\x19\xfd\xef\x9e\x1a\x9b\x43\xc5\x2a\xb0\xde\x9c\x91\xff\xe8\xf3\x23\x25\x0a\x2e\x3f\x87\xfb\xd9\xfc\x12\x1d\x55\x8b\x97\xe8\x3e\xc7\xac\xe4\xee\x29\x5f\x5e\x52\xcb\xfe\x90\x5c\x9d\x61\xe2\x3c\xe9\x67\x2b\x9c\xea\x5e\xc2\x76\x20\xd8\x3e\x7f\xdd\x3c\x81\x14\x00\xbc\xbc\xe9\x81\x6d\x11\x04\xf4\x1e\xa2\x0e\x85\xb9\xc1\x76\x98\xe9\x3d\x2c\xcf\xae\x60\x32\x55\x55\x50\xcb\x46\xee\x0e\xba\x3c\x74\x3b\x6b\x76\x37\x57\xb7\x81\x02\x8e\xb7\x36\xbc\xac\x13\x49\x8f\x76\xe1\x2e\xfe\x7b\xde\x1f\xe4\x5d\x57\x8b\x62\x69\xf8\x25\x95\xf5\xb9\xed\x6a\x68\x93\x81\xbf\x3f\x8f\xe5\xa0\xfe\xfb\x48\x7e\x06\x00\x00\xff\xff\xff\xf3\x2d\x49\x18\x05\x00\x00")

func relationship_typesBytes() ([]byte, error) {
	return bindataRead(
		_relationship_types,
		"relationship_types",
	)
}

func relationship_types() (*asset, error) {
	bytes, err := relationship_typesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "relationship_types", size: 1304, mode: os.FileMode(493), modTime: time.Unix(1451506218, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"capability_types": capability_types,
	"interface_types": interface_types,
	"node_types": node_types,
	"relationship_types": relationship_types,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"capability_types": &bintree{capability_types, map[string]*bintree{}},
	"interface_types": &bintree{interface_types, map[string]*bintree{}},
	"node_types": &bintree{node_types, map[string]*bintree{}},
	"relationship_types": &bintree{relationship_types, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

